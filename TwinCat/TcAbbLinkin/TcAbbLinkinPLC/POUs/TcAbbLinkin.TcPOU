<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcAbbLinkin" Id="{83aacf3c-7637-43d5-b1b4-45d5caf263aa}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcAbbLinkin
VAR_INPUT
	configuration : AbbLinkinConfiguration_Typ;
END_VAR
VAR_OUTPUT
	ready	: BOOL;
	error	: BOOL;
	errorID	: DINT;
	responseData : STRING;
END_VAR
VAR
	_connectionEnabled : BOOL;
	_httpClient: FB_IotHttpClient;
	_httpRequest: FB_IotHttpRequest;
	_httpHeader: FB_IotHttpHeaderFieldMap;
	_httpHeader2: FB_IotHttpHeaderFieldMap;
	_methodConnectionStartCalled: BOOL;
	_methodConnectionStopCalled: BOOL;
	_methodAckErrorCalled: BOOL;
	_state: ABBLINKIN_STATE;
	_requestQueue: AbbLinkinRequestQueue_Typ;
	_currentRequest: AbbLinkinRequest_Typ;
	
	testString: string;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="responseCallbacks" Id="{81e09dac-321f-4653-938f-510c189b178d}" />
    <Method Name="_callCommandSuccessHandler" Id="{4e7a3f83-8e9c-4794-9ff8-99e39dc09c79}">
      <Declaration><![CDATA[METHOD PRIVATE _callCommandSuccessHandler : BOOL
VAR_INPUT
	command : ABBLINKIN_COMMAND_TYPE;
END_VAR
VAR_IN_OUT
	httpRequest : FB_IotHttpRequest;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[


CASE command OF 
	ABBLINKIN_COMMAND_TYPE.GET_IO:
		;//TODO
		
	ABBLINKIN_COMMAND_TYPE.GET_STATE:
		_getStateRespCallbackSuccess(httpRequest);
		
	ABBLINKIN_COMMAND_TYPE.GET_SYMBOL:
		;//TODO
		
	ABBLINKIN_COMMAND_TYPE.MOTORS_OFF:
		;//TODO
		
	ABBLINKIN_COMMAND_TYPE.MOTORS_ON:
		;//TODO
		
	ABBLINKIN_COMMAND_TYPE.POWER_OFF:
		;//TODO
		
	ABBLINKIN_COMMAND_TYPE.POWER_ON:
		;//TODO
		
	ABBLINKIN_COMMAND_TYPE.RAPID_RESET:
		;//TODO
		
	ABBLINKIN_COMMAND_TYPE.RAPID_START:
		;//TODO
		
	ABBLINKIN_COMMAND_TYPE.RAPID_STOP:
		;//TODO
		
	ABBLINKIN_COMMAND_TYPE.SET_IO:
		;//TODO
		
	ABBLINKIN_COMMAND_TYPE.SET_SYMBOL:
		;//TODO
		
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_clearRequestStatus" Id="{c36ff0b3-102e-47ec-ab8d-11137cae997a}">
      <Declaration><![CDATA[METHOD PRIVATE _clearRequestStatus : BOOL
VAR_INPUT
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
pStatus^.busy := FALSE;
pStatus^.done := FALSE;
pStatus^.error := FALSE;
pStatus^.errorID := 0;
pStatus^.errorMsg := '';

_clearRequestStatus := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_configureClient" Id="{4a508a3b-482e-4d68-8353-2815209fac39}">
      <Declaration><![CDATA[METHOD PRIVATE _configureClient : BOOL
VAR_IN_OUT
	connectionConfig:	AbbLinkinConfiguration_Typ;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
_httpClient.sHostName := connectionConfig.remoteIpAddress;
_httpClient.nHostPort := connectionConfig.remotePort;
_httpClient.bKeepAlive := TRUE;
_httpClient.tConnectionTimeout := T#10S;


CASE connectionConfig.rwsVersion OF
	ABBLINKIN_RWS_API_VERSION.V1:
		_httpClient.stTLS.bNoServerCertCheck := TRUE;
		
	ABBLINKIN_RWS_API_VERSION.V2:
		_httpClient.stTLS.bNoServerCertCheck := FALSE;
		// TODO: add other tls settings
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_encodeBase64" Id="{3fa22cec-5508-414f-9012-9c1691dace64}">
      <Declaration><![CDATA[METHOD PRIVATE _encodeBase64 : STRING
VAR_INPUT
	rawText: STRING;
END_VAR
VAR
	_jsonDomParser : 	FB_JsonDomParser;
	_jsonRoot :	SJsonValue;
	_jsonValue: SJsonValue;
	_jsonValue2: SJsonValue;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[	
_jsonRoot := _jsonDomParser.ParseDocument('{"k": ""}');
_jsonValue := _jsonDomParser.FindMember(_jsonRoot, 'k');
_jsonValue2 := _jsonDomParser.SetBase64(_jsonValue, ADR(rawText), LEN(rawText));
_encodeBase64 := _jsonDomParser.GetString(_jsonValue2);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_getStateRespCallbackSuccess" Id="{70e217fe-2d07-46fe-9a64-f1eb329f34c5}" FolderPath="responseCallbacks\">
      <Declaration><![CDATA[METHOD PRIVATE _getStateRespCallbackSuccess : BOOL
VAR_IN_OUT
	httpRequest : 	FB_IotHttpRequest;
END_VAR
VAR
	jsonDomParser : FB_JsonDomParser;
	jsonRoot : SJsonValue;
	jsonValue : SJsonValue;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// RWS V1: https://developercenter.robotstudio.com/api/rwsApi/rapid_execution_get_page.html


jsonRoot := httpRequest.GetJsonDomContent(jsonDomParser);
jsonValue := jsonDomParser.FindMemberPath(jsonRoot, 'state#0/ctrlexecstate');
IF (jsonValue <> 0) THEN
	responseData := jsonDomParser.GetString(jsonValue);
ELSE
	responseData := '';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_requestQueueAdd" Id="{04fd7ebd-e8f9-46c7-bc9e-2330c22267da}">
      <Declaration><![CDATA[METHOD PRIVATE _requestQueueAdd : BOOL
VAR_INPUT
	request : AbbLinkinRequest_Typ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Note: the requestQueue and this method are temporary implementations. It is not a real queue as shown.

_requestQueue.request := request;
_requestQueue.empty := FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_requestQueuePop" Id="{daa4e678-3558-4037-bf7f-bd7a40f193a5}">
      <Declaration><![CDATA[METHOD PRIVATE _requestQueuePop : AbbLinkinRequest_Typ
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Note: the requestQueue and this method are temporary implementations. It is not a real queue as shown.

_requestQueue.empty := TRUE;
_requestQueuePop := _requestQueue.request;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_setHeader" Id="{03deb409-7be0-4e61-9c99-83e8f97b30dc}">
      <Declaration><![CDATA[METHOD PRIVATE _setHeader : BOOL
VAR_INPUT
END_VAR
VAR
	authValue : STRING;
	combinedUnPwRaw: STRING;
	combinedUnPwBase64: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Accept JSON 
IF configuration.rwsVersion = ABBLINKIN_RWS_API_VERSION.V2 THEN
	_httpHeader.AddField('Accept', 'application/hal+json;v=2.0', FALSE);
END_IF


// Authorization
combinedUnPwRaw := configuration.rwsUsername;
combinedUnPwRaw := CONCAT(combinedUnPwRaw, ':');
combinedUnPwRaw := CONCAT(combinedUnPwRaw, configuration.rwsPassword);
combinedUnPwBase64 := _encodeBase64(combinedUnPwRaw);

authValue := 'Basic ';
authValue := CONCAT(authValue, combinedUnPwBase64);
_httpHeader.AddField('Authorization', authValue, FALSE);



]]></ST>
      </Implementation>
    </Method>
    <Method Name="AckError" Id="{e7f175da-d890-48da-a6d6-1a4277b5b980}">
      <Declaration><![CDATA[METHOD AckError : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
_methodAckErrorCalled := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConnectionStart" Id="{ae04014b-99d1-4864-b820-dd29eedcb99e}">
      <Declaration><![CDATA[METHOD ConnectionStart : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// If Connection is already enabled, disable and disconnect
// Reference: https://infosys.beckhoff.com/content/1033/tf6760_tc3_iot_https_rest/9298409995.html?id=3568786990275794598
IF _connectionEnabled THEN
	_connectionEnabled := FALSE;
	_httpClient.Disconnect();
END_IF

_configureClient(configuration);
_connectionEnabled := TRUE;

_methodConnectionStartCalled := TRUE;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConnectionStop" Id="{fb28cdfe-8e1b-44f1-869a-b019fa3c0b7f}">
      <Declaration><![CDATA[METHOD ConnectionStop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
_connectionEnabled := FALSE;
_methodConnectionStopCalled := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cyclic" Id="{b14f94df-ed21-4275-9dc6-f78c593c481d}">
      <Declaration><![CDATA[METHOD Cyclic : BOOL
VAR_INPUT
END_VAR

VAR
	retVal: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF _connectionEnabled THEN
	_httpClient.Execute();
END_IF

// Status
ready := _connectionEnabled AND _httpClient.bConfigured;



IF NOT ready THEN
	_state := ABBLINKIN_STATE.IDLE;
END_IF


CASE _state OF 
	
	ABBLINKIN_STATE.IDLE:
		
		IF ready AND NOT _requestQueue.empty THEN
			_currentRequest := _requestQueuePop();
			_state := ABBLINKIN_STATE.SEND_REQUEST;
		END_IF
		
	ABBLINKIN_STATE.SEND_REQUEST:
		
		_setHeader();
		retVal := _httpRequest.SendRequest(_currentRequest.uri, _httpClient, _currentRequest.httpMethod, _currentRequest.pContent, _currentRequest.contentSize, _httpHeader);
		
		IF retVal = FALSE THEN
			_currentRequest.pStatus^.busy := FALSE;
			_currentRequest.pStatus^.error := TRUE;
			_currentRequest.pStatus^.errorMsg := 'The request could not be sent';
			
			_state := ABBLINKIN_STATE.IDLE;	// todo: decide if we want to retry
		ELSE
			_state := ABBLINKIN_STATE.WAIT_FOR_RESONSE;
		END_IF
		
	ABBLINKIN_STATE.WAIT_FOR_RESONSE:
	
		IF _httpRequest.bError THEN
			_currentRequest.pStatus^.busy := FALSE;
			_currentRequest.pStatus^.error := TRUE;
			_currentRequest.pStatus^.errorID := _httpRequest.eErrorId;
			_currentRequest.pStatus^.errorMsg := 'The client request object returned an error';
			
			_state := ABBLINKIN_STATE.IDLE;	// todo: decide if we want to retry
		ELSIF _httpRequest.bBusy = FALSE THEN
			_state := ABBLINKIN_STATE.PROCESS_RESPONSE;
		END_IF
		
	ABBLINKIN_STATE.PROCESS_RESPONSE:
		
		CASE _httpRequest.nStatusCode OF 
		
			200..204 : // HTTP Success
			
				// TODO: requestType-specific processing here
				_callCommandSuccessHandler(_currentRequest.command, _httpRequest);
				
				_currentRequest.pStatus^.busy := FALSE;
				_currentRequest.pStatus^.done := TRUE;
				
				_state := ABBLINKIN_STATE.IDLE;
				
			401, 503: // HTTP Error - "Unauthorized" 
				
				// TODO: implement Authorization implementation
				
				_state := ABBLINKIN_STATE.IDLE;	// todo: decide if we want to retry
								
			400, 402..451:	// HTTP Client Error	
				_currentRequest.pStatus^.busy := FALSE;
				_currentRequest.pStatus^.error := TRUE;
				_currentRequest.pStatus^.errorID := _httpRequest.nStatusCode;
				_currentRequest.pStatus^.errorMsg := 'The Robot responded with an error (client error, 4xx). See errorID';
				
				_state := ABBLINKIN_STATE.IDLE;	// todo: decide if we want to retry
				
			500..502, 504..511: // HTTP Server Error
				_currentRequest.pStatus^.busy := FALSE;
				_currentRequest.pStatus^.error := TRUE;
				_currentRequest.pStatus^.errorID := _httpRequest.nStatusCode;
				_currentRequest.pStatus^.errorMsg := 'The Robot responded with an error (server error, 5xx). See errorID';
				
				_state := ABBLINKIN_STATE.IDLE;	// todo: decide if we want to retry
				
		END_CASE
		
END_CASE



// Handle Methods

IF _methodConnectionStartCalled THEN
	error := _httpClient.bError;
	errorID := _httpClient.hrErrorCode;
	
	_methodConnectionStartCalled := FALSE;
END_IF

IF _methodConnectionStopCalled THEN
	error := 0;
	errorID := 0;
	
	_methodConnectionStopCalled := FALSE;
END_IF

IF _methodAckErrorCalled THEN
	error := 0;
	errorID := 0;
	
	_methodAckErrorCalled := FALSE;
END_IF


testString := _encodeBase64('Default User:robotics');
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetIO" Id="{bd29dab4-cb08-45fe-84ff-e3737f6110e8}">
      <Declaration><![CDATA[METHOD GetIO : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetState" Id="{39878dda-bc14-4b8b-833d-1d9c4ab2cc84}">
      <Declaration><![CDATA[METHOD GetState : BOOL
VAR_INPUT
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
END_VAR

VAR
	request: AbbLinkinRequest_Typ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Clear Status
_clearRequestStatus(pStatus);


request.command := ABBLINKIN_COMMAND_TYPE.GET_STATE;
request.httpMethod :=  ETcIotHttpRequestType.HTTP_Get;

CASE configuration.rwsVersion OF
	ABBLINKIN_RWS_API_VERSION.V1:
		request.uri := '/rw/rapid/execution?json=1';

	ABBLINKIN_RWS_API_VERSION.V2:	
		request.uri := '/rw/rapid/execution';
END_CASE

request.pStatus := pStatus;


_requestQueueAdd(request);

// Set Busy (or Error) Status
IF TRUE THEN // TODO: Check that request successfully added to queue
	pStatus^.busy := TRUE;
ELSE
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(ABBLINKIN_COMMAND_TYPE.GET_STATE);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ' could not be added to request Queue');
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetSymbol" Id="{85af9ad1-0b82-4752-9ea8-7aabc8bae9aa}">
      <Declaration><![CDATA[METHOD GetSymbol : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="IOWatchInit" Id="{73cfccc7-56e4-4d35-a07c-3dccb64e2e07}">
      <Declaration><![CDATA[METHOD IOWatchInit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="MotorsOff" Id="{0e9c796b-4548-4647-8b3c-207480990c05}">
      <Declaration><![CDATA[METHOD MotorsOff : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="MotorsOn" Id="{61a3e16c-d842-4ebd-be26-10100c74cc52}">
      <Declaration><![CDATA[METHOD MotorsOn : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerOff" Id="{7e704635-bfa1-4267-9db0-7f188918765f}">
      <Declaration><![CDATA[METHOD PowerOff : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerOn" Id="{e270cd96-8004-4691-9cb0-f9c8d0300c0b}">
      <Declaration><![CDATA[METHOD PowerOn : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="RapidReset" Id="{8680bb07-92fa-45e4-93ac-a5f26d92aefb}">
      <Declaration><![CDATA[METHOD RapidReset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="RapidStart" Id="{2acbd226-93a7-4d9b-8ddf-34c3d2ee1221}">
      <Declaration><![CDATA[METHOD RapidStart : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="RapidStop" Id="{648edf84-4daf-4e8c-8ad5-61b6305b08fb}">
      <Declaration><![CDATA[METHOD RapidStop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetIO" Id="{ce5e4a58-9783-46a9-ba0d-44594affd7f4}">
      <Declaration><![CDATA[METHOD SetIO : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetSymbol" Id="{bc0a5da5-b662-4b6f-a5f4-f2caf9d05bbf}">
      <Declaration><![CDATA[METHOD SetSymbol : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="TcAbbLinkin">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._callCommandSuccessHandler">
      <LineId Id="10" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._clearRequestStatus">
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._configureClient">
      <LineId Id="9" Count="4" />
      <LineId Id="24" Count="0" />
      <LineId Id="15" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._encodeBase64">
      <LineId Id="15" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._getStateRespCallbackSuccess">
      <LineId Id="32" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="25" Count="2" />
      <LineId Id="30" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._requestQueueAdd">
      <LineId Id="10" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._requestQueuePop">
      <LineId Id="10" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._setHeader">
      <LineId Id="36" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="31" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.AckError">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.ConnectionStart">
      <LineId Id="57" Count="1" />
      <LineId Id="64" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="62" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="69" Count="1" />
      <LineId Id="67" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.ConnectionStop">
      <LineId Id="12" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.Cyclic">
      <LineId Id="7" Count="1" />
      <LineId Id="10" Count="1" />
      <LineId Id="63" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="64" Count="2" />
      <LineId Id="70" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="79" Count="1" />
      <LineId Id="82" Count="1" />
      <LineId Id="157" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="87" Count="2" />
      <LineId Id="142" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="160" Count="1" />
      <LineId Id="101" Count="1" />
      <LineId Id="99" Count="1" />
      <LineId Id="98" Count="0" />
      <LineId Id="103" Count="1" />
      <LineId Id="162" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="106" Count="4" />
      <LineId Id="123" Count="2" />
      <LineId Id="129" Count="0" />
      <LineId Id="135" Count="1" />
      <LineId Id="138" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="140" Count="1" />
      <LineId Id="182" Count="1" />
      <LineId Id="134" Count="0" />
      <LineId Id="170" Count="2" />
      <LineId Id="133" Count="0" />
      <LineId Id="177" Count="2" />
      <LineId Id="173" Count="3" />
      <LineId Id="127" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="29" Count="2" />
      <LineId Id="41" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="48" Count="4" />
      <LineId Id="44" Count="0" />
      <LineId Id="57" Count="2" />
      <LineId Id="61" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.GetIO">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.GetState">
      <LineId Id="9" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="64" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="68" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.GetSymbol">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.IOWatchInit">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.MotorsOff">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.MotorsOn">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.PowerOff">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.PowerOn">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.RapidReset">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.RapidStart">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.RapidStop">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.SetIO">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.SetSymbol">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>