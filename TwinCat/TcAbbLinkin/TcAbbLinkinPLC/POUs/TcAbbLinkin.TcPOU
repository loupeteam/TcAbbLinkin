<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcAbbLinkin" Id="{83aacf3c-7637-43d5-b1b4-45d5caf263aa}" SpecialFunc="None">
    <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
FUNCTION_BLOCK TcAbbLinkin
VAR_INPUT
	configuration : AbbLinkinConfiguration_Typ;
END_VAR
VAR_OUTPUT
	readyForCmd		: BOOL;
	error			: BOOL;
	errorID			: DINT;
END_VAR
VAR
	_connectionEnabled : BOOL;
	_sendingEnabled: BOOL;
	_authorized: BOOL;
	
	_httpClient: FB_IotHttpClient;
	_httpRequest: FB_IotHttpRequest;
	_httpHeader: FB_IotHttpHeaderFieldMap;
	
	_methodConnectionStartCalled: BOOL;
	_methodConnectionStopCalled: BOOL;
	_methodAckErrorCalled: BOOL;
	
	_state: ABBLINKIN_STATE;
	_auth: AbbLinkinAuth_Typ;
	_requestQueue: AbbLinkinRequestQueue_Typ;
	_currentRequest: AbbLinkinRequest_Typ;
END_VAR

VAR CONSTANT
	AUTH_URI: STRING := '/?json=1';
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="digestMethods" Id="{29dc1ba2-5044-4aed-a071-8839204fb61b}" />
    <Folder Name="responseCallbacks" Id="{81e09dac-321f-4653-938f-510c189b178d}" />
    <Method Name="_calculateDigestResponse" Id="{b6ba6c5c-69f4-4fe0-9917-9e6697b8c0e1}" FolderPath="digestMethods\">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PRIVATE _calculateDigestResponse : STRING
VAR_INPUT
	username : STRING;
	realm : STRING;
	password : STRING;
	httpMethod : STRING;
	uri : STRING;
	nonce : STRING;
	nc : STRING;
	cnonce : STRING;
	qop : STRING;
END_VAR

VAR
	tempString : ABBLINKIN_STRING_EX_LEN;
	h1_byArr: ARRAY[0..15] OF BYTE;
	h1_hexStr: STRING;
	h2_byArr: ARRAY[0..15] OF BYTE;
	h2_hexStr: STRING;
	response_byArr: ARRAY[0..15] OF BYTE;
	response_hexStr: STRING;
	i: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// H1 hash
tempString := '';
tempString := CONCAT(tempString, username);
tempString := CONCAT(tempString, ':');
tempString := CONCAT(tempString, realm);
tempString := CONCAT(tempString, ':');
tempString := CONCAT(tempString, password);
F_GenerateHashValue(E_HashMode.HASH_MD5, ADR(tempString), INT_TO_UDINT(LEN(tempString)), ADR(h1_byArr), SIZEOF(h1_byArr));
h1_hexStr := '';
FOR i := 0 TO 15 DO
	h1_hexStr := CONCAT(h1_hexStr, BYTE_TO_HEXSTR(h1_byArr[i], 2, TRUE));
END_FOR


// H2 Hash
tempString := '';
tempString := CONCAT(tempString, httpMethod);
tempString := CONCAT(tempString, ':');
tempString := CONCAT(tempString, uri);
F_GenerateHashValue(E_HashMode.HASH_MD5, ADR(tempString), INT_TO_UDINT(LEN(tempString)), ADR(h2_byArr), SIZEOF(h2_byArr));
h2_hexStr := '';
FOR i := 0 TO 15 DO
	h2_hexStr := CONCAT(h2_hexStr, BYTE_TO_HEXSTR(h2_byArr[i], 2, TRUE));
END_FOR


// Response hash
tempString := '';
tempString := CONCAT(tempString, h1_hexStr);
tempString := CONCAT(tempString, ':');
tempString := CONCAT(tempString, nonce);
tempString := CONCAT(tempString, ':');
tempString := CONCAT(tempString, nc);
tempString := CONCAT(tempString, ':');
tempString := CONCAT(tempString, cnonce);
tempString := CONCAT(tempString, ':');
tempString := CONCAT(tempString, qop);
tempString := CONCAT(tempString, ':');
tempString := CONCAT(tempString, h2_hexStr);
F_GenerateHashValue(E_HashMode.HASH_MD5, ADR(tempString), INT_TO_UDINT(LEN(tempString)), ADR(response_byArr), SIZEOF(response_byArr));
response_hexStr := '';
FOR i := 0 TO 15 DO
	response_hexStr := CONCAT(response_hexStr, BYTE_TO_HEXSTR(response_byArr[i], 2, TRUE));
END_FOR

_calculateDigestResponse := response_hexStr;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_callCommandSuccessHandler" Id="{4e7a3f83-8e9c-4794-9ff8-99e39dc09c79}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PRIVATE _callCommandSuccessHandler : BOOL
VAR_INPUT
	command : ABBLINKIN_COMMAND_TYPE;
END_VAR
VAR_IN_OUT
	httpRequest : FB_IotHttpRequest;
	request: AbbLinkinRequest_Typ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE command OF 
	ABBLINKIN_COMMAND_TYPE.GET_IO:
		_getIORespCallbackSuccess(httpRequest, request);
		
	ABBLINKIN_COMMAND_TYPE.GET_STATE:
		_getStateRespCallbackSuccess(httpRequest, request);
		
	ABBLINKIN_COMMAND_TYPE.GET_SYMBOL:
		_getSymbolRespCallbackSuccess(httpRequest, request);
		
	ABBLINKIN_COMMAND_TYPE.MOTORS_OFF:
		; // Do Nothing
		
	ABBLINKIN_COMMAND_TYPE.MOTORS_ON:
		;// Do Nothing
		
	ABBLINKIN_COMMAND_TYPE.POWER_OFF:
		;// Do Nothing
		
	ABBLINKIN_COMMAND_TYPE.POWER_ON:
		;// Do Nothing
		
	ABBLINKIN_COMMAND_TYPE.RAPID_RESET:
		;// Do Nothing
		
	ABBLINKIN_COMMAND_TYPE.RAPID_START:
		;// Do Nothing
		
	ABBLINKIN_COMMAND_TYPE.RAPID_STOP:
		;// Do Nothing
		
	ABBLINKIN_COMMAND_TYPE.SET_IO:
		;// Do Nothing
		
	ABBLINKIN_COMMAND_TYPE.SET_SYMBOL:
		;// Do Nothing
		
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_clearRequestStatus" Id="{c36ff0b3-102e-47ec-ab8d-11137cae997a}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PRIVATE _clearRequestStatus : BOOL
VAR_INPUT
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
pStatus^.busy := FALSE;
pStatus^.done := FALSE;
pStatus^.error := FALSE;
pStatus^.errorID := 0;
pStatus^.errorMsg := '';

_clearRequestStatus := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_configureClient" Id="{4a508a3b-482e-4d68-8353-2815209fac39}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PRIVATE _configureClient : BOOL
VAR_IN_OUT
	connectionConfig:	AbbLinkinConfiguration_Typ;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
_httpClient.sHostName := connectionConfig.rwsIpAddress;
_httpClient.nHostPort := connectionConfig.rwsTcpPort;
_httpClient.bKeepAlive := TRUE;
_httpClient.tConnectionTimeout := T#10S;


CASE connectionConfig.rwsVersion OF
	ABBLINKIN_RWS_API_VERSION.V1:
		_httpClient.stTLS.bNoServerCertCheck := FALSE;
		
	ABBLINKIN_RWS_API_VERSION.V2:
		//_httpClient.stTLS.aPskKey := 0;
		_httpClient.stTLS.bNoServerCertCheck := FALSE;
		//_httpClient.stTLS.nPskKeyLen := 0;
		//_httpClient.stTLS.sCA := '';
		//_httpClient.stTLS.sCert := '';
	//	_httpClient.stTLS.sCiphers := 'TLS_AES_128_GCM_SHA256';
		//_httpClient.stTLS.sCrl := '';
		//_httpClient.stTLS.sKeyFile := '';
		//_httpClient.stTLS.sKeyPwd := '';
		//_httpClient.stTLS.sPskIdentity := '';
	//	_httpClient.stTLS.sVersion := 'tlsv1.3';
		
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_encodeBase64" Id="{3fa22cec-5508-414f-9012-9c1691dace64}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PRIVATE _encodeBase64 : STRING
VAR_INPUT
	rawText: STRING;
END_VAR
VAR
	_jsonDomParser : 	FB_JsonDomParser;
	_jsonRoot :	SJsonValue;
	_jsonValue: SJsonValue;
	_jsonValue2: SJsonValue;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[	
_jsonRoot := _jsonDomParser.ParseDocument('{"k": ""}');
_jsonValue := _jsonDomParser.FindMember(_jsonRoot, 'k');
_jsonValue2 := _jsonDomParser.SetBase64(_jsonValue, ADR(rawText), LEN(rawText));
_encodeBase64 := _jsonDomParser.GetString(_jsonValue2);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_getIO" Id="{bd29dab4-cb08-45fe-84ff-e3737f6110e8}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PRIVATE _getIO : BOOL
VAR_INPUT
	signal : STRING;
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
	pResultBool : POINTER TO BOOL := 0;
	pResultDint : POINTER TO DINT := 0;
	pResultLreal : POINTER TO LREAL := 0;
END_VAR

VAR
	request: AbbLinkinRequest_Typ;
	pointersSet: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pStatus = 0 THEN
	_getIO := FALSE;
	RETURN;
END_IF;

// Clear Status
_clearRequestStatus(pStatus);

// Check that one and only one pointer is populated
pointersSet := 0;
IF (pResultBOOL <> 0) THEN 
	request.results.dataType := ABBLINKIN_DATA_TYPE_Typ._BOOL;
	request.results.pDataBool := pResultBool;
	pointersSet := pointersSet + 1; 
END_IF
IF (pResultDINT <> 0) THEN
	request.results.dataType := ABBLINKIN_DATA_TYPE_Typ._DINT;
	request.results.pDataDint := pResultDint;
	pointersSet := pointersSet + 1;
END_IF
IF (pResultLREAL <> 0) THEN
	request.results.dataType := ABBLINKIN_DATA_TYPE_Typ._LREAL;
	request.results.pDataLreal := pResultLreal;
	pointersSet := pointersSet + 1;
END_IF


IF pointersSet = 0 THEN
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(ABBLINKIN_COMMAND_TYPE.GET_STATE);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ': No result pointer set');
	_getIO := FALSE;
ELSIF pointersSet >= 2 THEN
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(ABBLINKIN_COMMAND_TYPE.GET_STATE);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ': Two or more result pointer set');
	_getIO := FALSE;
END_IF;

request.pStatus := pStatus;
request.command := ABBLINKIN_COMMAND_TYPE.GET_IO;
request.httpMethod :=  ETcIotHttpRequestType.HTTP_Get;

CASE configuration.rwsVersion OF
	ABBLINKIN_RWS_API_VERSION.V1:
		request.uri := '/rw/iosystem/signals/';
		request.uri := CONCAT(request.uri, signal);
		request.uri := CONCAT(request.uri, '?json=1');

	ABBLINKIN_RWS_API_VERSION.V2:	
		request.uri := '/rw/iosystem/signals/';
		request.uri := CONCAT(request.uri, signal);
END_CASE

// Add Request to Queue, and Set Busy (or Error) Status
IF _requestQueueAdd(request) THEN
	pStatus^.busy := TRUE;
	_getIO := TRUE;
ELSE
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(request.command);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ' could not be added to request Queue');
	_getIO := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_getIORespCallbackSuccess" Id="{8de14980-869f-4f0b-8bbf-fcfda3d0e6d3}" FolderPath="responseCallbacks\">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PRIVATE _getIORespCallbackSuccess : BOOL
VAR_IN_OUT
	httpRequest : 	FB_IotHttpRequest;
	request : AbbLinkinRequest_Typ;
END_VAR
VAR
	jsonDomParser : FB_JsonDomParser;
	jsonRoot : SJsonValue;
	jsonValue : SJsonValue;
	valuePath : STRING;
	valueString : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE configuration.rwsVersion OF 
	ABBLINKIN_RWS_API_VERSION.V1:
		valuePath := '_embedded/_state#0/lvalue';
	ABBLINKIN_RWS_API_VERSION.V2:
		valuePath := '_embedded/resources#0/lvalue';
END_CASE

jsonRoot := httpRequest.GetJsonDomContent(jsonDomParser);
jsonValue := jsonDomParser.FindMemberPath(jsonRoot, valuePath);
IF (jsonValue <> 0) THEN
	valueString := jsonDomParser.GetString(jsonValue);
	
	CASE request.results.dataType OF
		ABBLINKIN_DATA_TYPE_Typ._BOOL:
			request.results.pDataBool^ := INT_TO_BOOL(STRING_TO_INT(valueString));
		ABBLINKIN_DATA_TYPE_Typ._DINT:
			request.results.pDataDint^ := STRING_TO_DINT(valueString);
		ABBLINKIN_DATA_TYPE_Typ._LREAL:
			request.results.pDataLreal^ := STRING_TO_LREAL(valueString);
	ELSE
		; // error todo
	END_CASE
ELSE
	request.pStatus^.error := TRUE;
	request.pStatus^.errorID := 0;
	request.pStatus^.errorMsg := 'Unable to parse RWS json response';
END_IF


_getIORespCallbackSuccess := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_getStateRespCallbackSuccess" Id="{70e217fe-2d07-46fe-9a64-f1eb329f34c5}" FolderPath="responseCallbacks\">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PRIVATE _getStateRespCallbackSuccess : BOOL
VAR_IN_OUT
	httpRequest : 	FB_IotHttpRequest;
	request : AbbLinkinRequest_Typ;
END_VAR
VAR
	jsonDomParser : FB_JsonDomParser;
	jsonRoot : SJsonValue;
	jsonValue : SJsonValue;
	valuePath : STRING;
	tempString : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE configuration.rwsVersion OF 
	ABBLINKIN_RWS_API_VERSION.V1:
		valuePath := '_embedded/_state#0/ctrlexecstate';
	ABBLINKIN_RWS_API_VERSION.V2:
		valuePath := 'state#0/ctrlexecstate';
END_CASE

jsonRoot := httpRequest.GetJsonDomContent(jsonDomParser);
jsonValue := jsonDomParser.FindMemberPath(jsonRoot, valuePath);
IF (jsonValue <> 0) THEN
	request.results.pDataString^ := jsonDomParser.GetString(jsonValue);
	//tempString := jsonDomParser.GetString(jsonValue);
	//memset(request.pResults, 0, SIZEOF(AbbLinkinGetterResults_Typ.data));
	//memcpy(request.pResults, ADR(tempString), LEN(tempString) + 1);
	//request.pResults^.dataType := ABBLINKIN_RESULT_TYPE_Typ._STRING;
	//request.pResults^.dataLen := LEN(tempString) + 1;
ELSE
	request.pStatus^.error := TRUE;
	request.pStatus^.errorID := 0;
	request.pStatus^.errorMsg := 'Unable to parse RWS json response';
	//request.pResults^.dataType := ABBLINKIN_RESULT_TYPE_Typ._NONE;
	//request.pResults^.dataLen := 0;
END_IF


_getStateRespCallbackSuccess := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_getSymbol" Id="{d9ba7421-7242-4767-a53d-8b068c42b046}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PRIVATE _getSymbol : BOOL
VAR_INPUT
	signal : STRING;
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
	pResultBool : POINTER TO BOOL := 0;
	pResultLreal : POINTER TO LREAL := 0;
	pResultString : POINTER TO STRING := 0;
END_VAR

VAR
	request: AbbLinkinRequest_Typ;
	pointersSet: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pStatus = 0 THEN
	_getSymbol := FALSE;
	RETURN;
END_IF;

// Clear Status
_clearRequestStatus(pStatus);

// Check that one and only one pointer is populated
pointersSet := 0;
IF (pResultBOOL <> 0) THEN 
	request.results.dataType := ABBLINKIN_DATA_TYPE_Typ._BOOL;
	request.results.pDataBool := pResultBool;
	pointersSet := pointersSet + 1; 
END_IF
IF (pResultLREAL <> 0) THEN
	request.results.dataType := ABBLINKIN_DATA_TYPE_Typ._LREAL;
	request.results.pDataLreal := pResultLreal;
	pointersSet := pointersSet + 1;
END_IF
IF (pResultSTRING <> 0) THEN
	request.results.dataType := ABBLINKIN_DATA_TYPE_Typ._STRING;
	request.results.pDataString := pResultString;
	pointersSet := pointersSet + 1;
END_IF


IF pointersSet = 0 THEN
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(ABBLINKIN_COMMAND_TYPE.GET_SYMBOL);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ': No result pointer set');
	_getSymbol := FALSE;
ELSIF pointersSet >= 2 THEN
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(ABBLINKIN_COMMAND_TYPE.GET_SYMBOL);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ': Two or more result pointer set');
	_getSymbol := FALSE;
END_IF;

request.pStatus := pStatus;
request.command := ABBLINKIN_COMMAND_TYPE.GET_SYMBOL;
request.httpMethod :=  ETcIotHttpRequestType.HTTP_Get;

CASE configuration.rwsVersion OF
	ABBLINKIN_RWS_API_VERSION.V1:
		request.uri := '/rw/rapid/symbol/data/';
		request.uri := CONCAT(request.uri, signal);		// e.g. signal='RAPID/T_ROB1/Module1/myRapidString'
		request.uri := CONCAT(request.uri, '?json=1');

	ABBLINKIN_RWS_API_VERSION.V2:	
		request.uri := '/rw/rapid/symbol/';
		request.uri := CONCAT(request.uri, signal);		// e.g. signal='RAPID/T_ROB1/Module1/myRapidString'
		request.uri := CONCAT(request.uri, '/data');
		
END_CASE

// Add Request to Queue, and Set Busy (or Error) Status
IF _requestQueueAdd(request) THEN
	pStatus^.busy := TRUE;
	_getSymbol := TRUE;
ELSE
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(request.command);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ' could not be added to request Queue');
	_getSymbol := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_getSymbolRespCallbackSuccess" Id="{ef9782bf-23a7-46c0-9904-995a74b6e086}" FolderPath="responseCallbacks\">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PRIVATE _getSymbolRespCallbackSuccess : BOOL
VAR_IN_OUT
	httpRequest : 	FB_IotHttpRequest;
	request : AbbLinkinRequest_Typ;
END_VAR
VAR
	jsonDomParser : FB_JsonDomParser;
	jsonRoot : SJsonValue;
	jsonValue : SJsonValue;
	valuePath : STRING;
	valueString : STRING;
	valueStringNoQuotes : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE configuration.rwsVersion OF 
	ABBLINKIN_RWS_API_VERSION.V1:
		valuePath := '_embedded/_state#0/value';
	ABBLINKIN_RWS_API_VERSION.V2:
		valuePath := 'state#0/value';
END_CASE

jsonRoot := httpRequest.GetJsonDomContent(jsonDomParser);
jsonValue := jsonDomParser.FindMemberPath(jsonRoot, valuePath);
IF (jsonValue <> 0) THEN
	valueString := jsonDomParser.GetString(jsonValue);
	
	CASE request.results.dataType OF
		ABBLINKIN_DATA_TYPE_Typ._BOOL:
			request.results.pDataBool^ := STRING_TO_BOOL(valueString);
		ABBLINKIN_DATA_TYPE_Typ._LREAL:
			request.results.pDataLreal^ := STRING_TO_LREAL(valueString);
		ABBLINKIN_DATA_TYPE_Typ._STRING:
			valueStringNoQuotes := MID(valueString, len(valueString) - 2, 2); // MID removes beginning and ending double-quote (") characters
			request.results.pDataString^ := valueStringNoQuotes;
	ELSE
		; // error todo
	END_CASE
ELSE
	request.pStatus^.error := TRUE;
	request.pStatus^.errorID := 0;
	request.pStatus^.errorMsg := 'Unable to parse RWS json response';
END_IF


_getSymbolRespCallbackSuccess := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_parseWwwAuthForParameter" Id="{3381c2f0-a73a-48c3-a8d7-1dfd534075ee}" FolderPath="digestMethods\">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PRIVATE _parseWwwAuthForParameter : STRING

VAR_INPUT
	keyString :	STRING;
END_VAR

VAR_IN_OUT
	contentString : ABBLINKIN_STRING_EX_LEN;
END_VAR

VAR
	contentLen : INT;
	keyLocation : INT;
	firstQuoteLocation : INT;
	secondQuoteLocation : INT;
	tempString : ABBLINKIN_STRING_EX_LEN;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
contentLen := LEN(contentString);
keyLocation := FIND(contentString, keyString);
IF keyLocation = 0 THEN 
	_parseWwwAuthForParameter := '';
	RETURN;
END_IF
tempString := RIGHT(contentString, contentLen - keyLocation);
firstQuoteLocation := FIND(tempString, '"') + keyLocation;
tempString := RIGHT(contentString, contentLen - firstQuoteLocation);
secondQuoteLocation := FIND(tempString, '"') + firstQuoteLocation;
_parseWwwAuthForParameter := MID(contentString, secondQuoteLocation - firstQuoteLocation - 1, firstQuoteLocation + 1);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_requestQueueAdd" Id="{04fd7ebd-e8f9-46c7-bc9e-2330c22267da}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PRIVATE _requestQueueAdd : BOOL
VAR_INPUT
	request : AbbLinkinRequest_Typ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Note: the requestQueue and this method are temporary implementations. It is not a real queue as shown.

_requestQueue.request := request;
_requestQueue.empty := FALSE;

_requestQueueAdd := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_requestQueuePop" Id="{daa4e678-3558-4037-bf7f-bd7a40f193a5}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PRIVATE _requestQueuePop : AbbLinkinRequest_Typ
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Note: the requestQueue and this method are temporary implementations. It is not a real queue as shown.

_requestQueue.empty := TRUE;
_requestQueuePop := _requestQueue.request;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_setHeader" Id="{03deb409-7be0-4e61-9c99-83e8f97b30dc}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PRIVATE _setHeader : BOOL
VAR_INPUT
	authorizationValue : ABBLINKIN_AUTH_HEADER_VALUE;
END_VAR
VAR
	authValue : STRING;
	combinedUnPwRaw: STRING;
	combinedUnPwBase64: STRING;
	anyCookieSetYet: BOOL;
	tempString: STRING;
	cookieValue: ABBLINKIN_STRING_EX_LEN;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Accept 
IF configuration.rwsVersion = ABBLINKIN_RWS_API_VERSION.V2 THEN
	_httpHeader.AddField('Accept', 'application/hal+json;v=2.0', FALSE);
ELSE
	_httpHeader.AddField('Accept', '*/*', FALSE);
END_IF


// Authorization
CASE authorizationValue OF
	ABBLINKIN_AUTH_HEADER_VALUE.NONE:
		_httpHeader.AddField('Authorization', ' ', FALSE);
	
	ABBLINKIN_AUTH_HEADER_VALUE.BASIC:
		combinedUnPwRaw := configuration.rwsUsername;
		combinedUnPwRaw := CONCAT(combinedUnPwRaw, ':');
		combinedUnPwRaw := CONCAT(combinedUnPwRaw, configuration.rwsPassword);
		combinedUnPwBase64 := _encodeBase64(combinedUnPwRaw);
		
		authValue := 'Basic ';
		authValue := CONCAT(authValue, combinedUnPwBase64);
		_httpHeader.AddField('Authorization', authValue, FALSE);
	
	ABBLINKIN_AUTH_HEADER_VALUE.DIGEST:
		_httpHeader.AddField('Authorization', _auth.digest.authContent, FALSE);
		
END_CASE


// Cookie
anyCookieSetYet := FALSE;
cookieValue := '';
IF LEN(_auth.httpSessionCookie) > 0 THEN
	tempString := '';
	tempString := CONCAT(tempString, '-http-session-='); 
	tempString := CONCAT(tempString, _auth.httpSessionCookie); 
	cookieValue := CONCAT(cookieValue, tempString);
	//_httpHeader.AddField('Cookie', tempString, anyCookieSetYet);
	anyCookieSetYet := TRUE;
END_IF

IF LEN(_auth.ABBCXCookie) > 0 THEN
	IF anyCookieSetYet THEN
		tempString := '; ';
	ELSE
		tempString := '';	
	END_IF
	tempString := CONCAT(tempString, 'ABBCX='); 
	tempString := CONCAT(tempString, _auth.ABBCXCookie); 
	cookieValue := CONCAT(cookieValue, tempString);	
	//_httpHeader.AddField('Cookie', tempString, anyCookieSetYet);
	anyCookieSetYet := TRUE;
END_IF

_httpHeader.AddField('Cookie', cookieValue, FALSE);


// Content-Type
CASE configuration.rwsVersion OF
	ABBLINKIN_RWS_API_VERSION.V1:
		_httpHeader.AddField('Content-Type', 'application/x-www-form-urlencoded', FALSE);
	ABBLINKIN_RWS_API_VERSION.V2:
		_httpHeader.AddField('Content-Type', 'application/x-www-form-urlencoded;v=2.0', FALSE);	
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_storeCookies" Id="{495ad33e-c453-424c-aeee-f8fc1c4fb6d3}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PRIVATE _storeCookies : BOOL
VAR_INPUT
	httpRequest:	FB_IotHttpRequest;
END_VAR
VAR
	setCookieValue:	ABBLINKIN_STRING_EX_LEN;
	Set: INT;
	tempString:	ABBLINKIN_STRING_EX_LEN;
	setCookieValueLen: INT;
	keyLoc : INT;
	equalLoc: INT;
	semicolonLoc : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF httpRequest.GetHeaderField('Set-Cookie', ADR(setCookieValue), SIZEOF(setCookieValue)-1) THEN 
	
	// NOTE: if there are multiple 'Set-Cookie' headers, they will all be contained in one value, separated by a newline
	//		e.g. 'token1=Beckhoff$Ntoken2=IoT' per https://infosys.beckhoff.com/content/1033/tf6760_tc3_iot_https_rest/9335286283.html
	// Real header examples from RWS:
	//		Set-Cookie: -http-session-=1::http.session::241eb766f25fa09a53f749ebbafb9aa9; path=/; domain=127.0.0.1; httponly\r\n
	//		Set-Cookie: ABBCX=12; path=/; domain=127.0.0.1; httponly\r\n
	
	setCookieValueLen := len(setCookieValue);
		
	// -http-session-
	keyLoc := FIND(setCookieValue, '-http-session-');
	tempString := RIGHT(setCookieValue, setCookieValueLen - keyLoc);
	equalLoc := FIND(tempString, '=') + keyLoc;
	tempString := RIGHT(setCookieValue, setCookieValueLen - equalLoc);
	semicolonLoc := FIND(tempString, ';') + equalLoc;
	_auth.httpSessionCookie := MID(setCookieValue, semicolonLoc - equalLoc - 1, equalLoc + 1);
	
	
	// ABBCX
	keyLoc := FIND(setCookieValue, 'ABBCX');
	tempString := RIGHT(setCookieValue, setCookieValueLen - keyLoc);
	equalLoc := FIND(tempString, '=') + keyLoc;
	tempString := RIGHT(setCookieValue, setCookieValueLen - equalLoc);
	semicolonLoc := FIND(tempString, ';') + equalLoc;
	_auth.ABBCXCookie := MID(setCookieValue, semicolonLoc - equalLoc - 1, equalLoc + 1);
	
	
END_IF



]]></ST>
      </Implementation>
    </Method>
    <Method Name="AckError" Id="{e7f175da-d890-48da-a6d6-1a4277b5b980}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD AckError : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
_methodAckErrorCalled := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConnectionStart" Id="{ae04014b-99d1-4864-b820-dd29eedcb99e}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD ConnectionStart : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// If Connection is already enabled, disable and disconnect
// Reference: https://infosys.beckhoff.com/content/1033/tf6760_tc3_iot_https_rest/9298409995.html?id=3568786990275794598
IF _connectionEnabled THEN
	_connectionEnabled := FALSE;
	_httpClient.Disconnect();
END_IF

_configureClient(configuration);
_connectionEnabled := TRUE;

_methodConnectionStartCalled := TRUE;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConnectionStop" Id="{fb28cdfe-8e1b-44f1-869a-b019fa3c0b7f}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD ConnectionStop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
_httpClient.Disconnect();
_connectionEnabled := FALSE;
_methodConnectionStopCalled := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cyclic" Id="{b14f94df-ed21-4275-9dc6-f78c593c481d}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD Cyclic : BOOL
VAR_INPUT
END_VAR

VAR
	retVal: BOOL;
	digestLocation: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF _connectionEnabled THEN
	_httpClient.Execute();
END_IF

// Status
_sendingEnabled := _connectionEnabled AND _httpClient.bConfigured;
readyForCmd := _sendingEnabled AND _authorized;

IF NOT _sendingEnabled THEN
	_state := ABBLINKIN_STATE.IDLE;
END_IF


CASE _state OF 
	
	ABBLINKIN_STATE.IDLE:
		
		IF _sendingEnabled THEN
			IF _authorized THEN 
				
				// Check for existing request
				IF _currentRequest.pStatus <> 0	THEN 
					IF _currentRequest.pStatus^.busy THEN
						// This is the case when a request was sent, but a 401 Unauthorized was returned (causing re-auth steps). Here, we are retrying.
						_state := ABBLINKIN_STATE.SEND_REQUEST;
					END_IF;
				END_IF
				
				// Check if queue contains at least one request
				IF _state <> ABBLINKIN_STATE.SEND_REQUEST  AND NOT _requestQueue.empty THEN
					_currentRequest := _requestQueuePop();
					_state := ABBLINKIN_STATE.SEND_REQUEST;
				END_IF;
			ELSE
				// Start Auth sequence within state machine
				_state := ABBLINKIN_STATE.AUTH_SEND_REQUEST;
			END_IF;
		END_IF
		
	ABBLINKIN_STATE.SEND_REQUEST:
		
		_setHeader(ABBLINKIN_AUTH_HEADER_VALUE.NONE);
		retVal := _httpRequest.SendRequest(_currentRequest.uri, _httpClient, _currentRequest.httpMethod, ADR(_currentRequest.httpBody), INT_TO_UDINT(LEN(_currentRequest.httpBody)), _httpHeader);
		
		IF retVal = FALSE THEN
			_currentRequest.pStatus^.busy := FALSE;
			_currentRequest.pStatus^.error := TRUE;
			_currentRequest.pStatus^.errorMsg := 'The request could not be sent';
			
			_state := ABBLINKIN_STATE.IDLE;	// todo: decide if we want to retry
		ELSE
			_state := ABBLINKIN_STATE.WAIT_FOR_RESONSE;
		END_IF
		
	ABBLINKIN_STATE.WAIT_FOR_RESONSE:
	
		IF _httpRequest.bError THEN
			_currentRequest.pStatus^.busy := FALSE;
			_currentRequest.pStatus^.error := TRUE;
			_currentRequest.pStatus^.errorID := _httpRequest.eErrorId;
			_currentRequest.pStatus^.errorMsg := 'The client request object returned an error';
			
			_state := ABBLINKIN_STATE.IDLE;	// todo: decide if we want to retry
		ELSIF _httpRequest.bBusy = FALSE THEN
			_state := ABBLINKIN_STATE.PROCESS_RESPONSE;
		END_IF
		
	ABBLINKIN_STATE.PROCESS_RESPONSE:
		
		CASE _httpRequest.nStatusCode OF 
		
			200..204 : // HTTP Success
			
				// TODO: requestType-specific processing here
				_callCommandSuccessHandler(_currentRequest.command, _httpRequest, _currentRequest);
				
				// Write and close out current request status
				_currentRequest.pStatus^.busy := FALSE;
				_currentRequest.pStatus^.done := NOT _currentRequest.pStatus^.error; // Set done if error false
				MEMSET(ADR(_currentRequest), 0, SIZEOF(_currentRequest));
				
				_state := ABBLINKIN_STATE.IDLE;
				
			401, 503: // HTTP Error - "Unauthorized" 
				
				// TODO: implement Authorization implementation
				_authorized := FALSE;
				_state := ABBLINKIN_STATE.IDLE;	// todo: decide if we want to retry
								
			400, 402..451:	// HTTP Client Error	
				_currentRequest.pStatus^.busy := FALSE;
				_currentRequest.pStatus^.error := TRUE;
				_currentRequest.pStatus^.errorID := _httpRequest.nStatusCode;
				_currentRequest.pStatus^.errorMsg := 'The Robot responded with an error (client error, 4xx). See errorID';
				
				_state := ABBLINKIN_STATE.IDLE;	// todo: decide if we want to retry
				
			500..502, 504..511: // HTTP Server Error
				_currentRequest.pStatus^.busy := FALSE;
				_currentRequest.pStatus^.error := TRUE;
				_currentRequest.pStatus^.errorID := _httpRequest.nStatusCode;
				_currentRequest.pStatus^.errorMsg := 'The Robot responded with an error (server error, 5xx). See errorID';
				
				_state := ABBLINKIN_STATE.IDLE;	// todo: decide if we want to retry
							
		END_CASE
	
	
	ABBLINKIN_STATE.AUTH_START:
		_auth.numAttempts := 0;
		_state := ABBLINKIN_STATE.AUTH_SEND_REQUEST;
		
	ABBLINKIN_STATE.AUTH_SEND_REQUEST:
		
		CASE configuration.rwsVersion OF
			ABBLINKIN_RWS_API_VERSION.V1:
				_setHeader(ABBLINKIN_AUTH_HEADER_VALUE.NONE);
			ABBLINKIN_RWS_API_VERSION.V2:
				_setHeader(ABBLINKIN_AUTH_HEADER_VALUE.BASIC);
		END_CASE
		
		retVal := _httpRequest.SendRequest(AUTH_URI, _httpClient, ETcIotHttpRequestType.HTTP_Get, 0, 0, _httpHeader);
		
		IF retVal = FALSE THEN
			_state := ABBLINKIN_STATE.IDLE;	// TODO: handle error better
		ELSE
			_state := ABBLINKIN_STATE.AUTH_WAIT_FOR_RESONSE;
		END_IF
		
	ABBLINKIN_STATE.AUTH_WAIT_FOR_RESONSE:
		
		IF _httpRequest.bError THEN
			_state := ABBLINKIN_STATE.IDLE;	// TODO: handle error better
		ELSIF _httpRequest.bBusy = FALSE THEN
			_state := ABBLINKIN_STATE.AUTH_PROCESS_RESPONSE;
		END_IF
		
	ABBLINKIN_STATE.AUTH_PROCESS_RESPONSE:
		
		_storeCookies(_httpRequest);
		
		CASE _httpRequest.nStatusCode OF 
		
			200..204 : // HTTP Success
				
				// Successfully authorized
				_authorized := TRUE;
				
				_state := ABBLINKIN_STATE.IDLE;
				
			401: // HTTP Error - "Unauthorized"

			
				IF _httpRequest.GetHeaderField('WWW-Authenticate', ADR(_auth.wwwAuthContent), SIZEOF(_auth.wwwAuthContent)) THEN 
					_state := ABBLINKIN_STATE.AUTH_DIGEST_RESPONSE_CALCULATE;
				ELSE
					// Invalid username or password
					_state := ABBLINKIN_STATE.IDLE;	// todo: handle better	
				END_IF
				
			503:  
				// Note: You can get a 503 if you try to send the same credentials repeatedly instead of 
				// 		sending the http session cookies that the server provides after the first successful authentication
				
				_state := ABBLINKIN_STATE.IDLE;	// todo: handle better
		ELSE
			
			_state := ABBLINKIN_STATE.IDLE;	// todo: handle better				
		END_CASE
	
	
		
	
	ABBLINKIN_STATE.AUTH_DIGEST_RESPONSE_CALCULATE:
		// Calculate Digest parameters
		
		
		// Verify that DIGEST in header
		digestLocation := FIND(_auth.wwwAuthContent, 'Digest');
		IF digestLocation = 0 THEN 
			// 'Digest not found in WWW-Authenticate header. ';
			; // error todo
		END_IF
		
		// Extract parameter values from WWW-Authenticate header
		_auth.digest.realm	:= _parseWwwAuthForParameter('realm', _auth.wwwAuthContent);
		_auth.digest.qop	:= _parseWwwAuthForParameter('qop', _auth.wwwAuthContent);
		_auth.digest.nonce	:= _parseWwwAuthForParameter('nonce', _auth.wwwAuthContent);
		_auth.digest.opaque	:= _parseWwwAuthForParameter('opaque', _auth.wwwAuthContent);
		
		IF (_auth.digest.realm = '' OR
			_auth.digest.qop = '' OR
			_auth.digest.nonce = '' OR
			_auth.digest.opaque = '') THEN
			; // error todo 'Digest header unavailable'
		END_IF;
 
		// Calculate Digest response
		_auth.digest.nc := '00000001'; // todo refine
		_auth.digest.cnonce := 'diddLOPR'; // todo refine
		_auth.digest.response := _calculateDigestResponse(	username := configuration.rwsUsername,
															realm := _auth.digest.realm,
															password := configuration.rwsPassword,
															httpMethod := 'GET',
															uri := AUTH_URI,
															nonce := _auth.digest.nonce,
															nc := _auth.digest.nc,
															cnonce := _auth.digest.cnonce,
															qop := _auth.digest.qop);
		
		
		// Formulate request
		_auth.digest.authContent := 'Digest username="';
		concat2(ADR(_auth.digest.authContent), ADR(configuration.rwsUsername), ADR(_auth.digest.authContent), SIZEOF(_auth.digest.authContent));
		concat2(ADR(_auth.digest.authContent), ADR('", realm="'), ADR(_auth.digest.authContent), SIZEOF(_auth.digest.authContent));
		concat2(ADR(_auth.digest.authContent), ADR(_auth.digest.realm), ADR(_auth.digest.authContent), SIZEOF(_auth.digest.authContent));
		concat2(ADR(_auth.digest.authContent), ADR('", nonce="'), ADR(_auth.digest.authContent), SIZEOF(_auth.digest.authContent));
		concat2(ADR(_auth.digest.authContent), ADR(_auth.digest.nonce), ADR(_auth.digest.authContent), SIZEOF(_auth.digest.authContent));
		concat2(ADR(_auth.digest.authContent), ADR('", uri="'), ADR(_auth.digest.authContent), SIZEOF(_auth.digest.authContent));
		concat2(ADR(_auth.digest.authContent), ADR(AUTH_URI), ADR(_auth.digest.authContent), SIZEOF(_auth.digest.authContent));
		concat2(ADR(_auth.digest.authContent), ADR('", algorithm="MD5", qop="'), ADR(_auth.digest.authContent), SIZEOF(_auth.digest.authContent));
		concat2(ADR(_auth.digest.authContent), ADR(_auth.digest.qop), ADR(_auth.digest.authContent), SIZEOF(_auth.digest.authContent));
		concat2(ADR(_auth.digest.authContent), ADR('", nc="'), ADR(_auth.digest.authContent), SIZEOF(_auth.digest.authContent));
		concat2(ADR(_auth.digest.authContent), ADR(_auth.digest.nc), ADR(_auth.digest.authContent), SIZEOF(_auth.digest.authContent));
		concat2(ADR(_auth.digest.authContent), ADR('", cnonce="'), ADR(_auth.digest.authContent), SIZEOF(_auth.digest.authContent));
		concat2(ADR(_auth.digest.authContent), ADR(_auth.digest.cnonce), ADR(_auth.digest.authContent), SIZEOF(_auth.digest.authContent));
		concat2(ADR(_auth.digest.authContent), ADR('", response="'), ADR(_auth.digest.authContent), SIZEOF(_auth.digest.authContent));
		concat2(ADR(_auth.digest.authContent), ADR(_auth.digest.response), ADR(_auth.digest.authContent), SIZEOF(_auth.digest.authContent));
		concat2(ADR(_auth.digest.authContent), ADR('"'), ADR(_auth.digest.authContent), SIZEOF(_auth.digest.authContent));
		
		_state := ABBLINKIN_STATE.AUTH_DIGEST_RESPONSE_SEND;
	
	ABBLINKIN_STATE.AUTH_DIGEST_RESPONSE_SEND:
	
		_setHeader(ABBLINKIN_AUTH_HEADER_VALUE.DIGEST);
		retVal := _httpRequest.SendRequest(AUTH_URI, _httpClient, ETcIotHttpRequestType.HTTP_Get, 0, 0, _httpHeader);
		
		IF retVal = FALSE THEN
			_state := ABBLINKIN_STATE.IDLE;	// TODO: handle error better
		ELSE
			_state := ABBLINKIN_STATE.AUTH_WAIT_FOR_RESONSE;
		END_IF
		
	
END_CASE





// Handle Methods

IF _methodConnectionStartCalled THEN
	error := _httpClient.bError;
	errorID := _httpClient.hrErrorCode;
	
	_methodConnectionStartCalled := FALSE;
END_IF

IF _methodConnectionStopCalled THEN
	error := 0;
	errorID := 0;
	
	_methodConnectionStopCalled := FALSE;
END_IF

IF _methodAckErrorCalled THEN
	error := 0;
	errorID := 0;
	
	_methodAckErrorCalled := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetIOAnalog" Id="{424a197a-bbbf-4f2e-8c17-41d394c583bb}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD GetIOAnalog : BOOL
VAR_INPUT
	signal : STRING;
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
	pResult : POINTER TO LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GetIOAnalog:= _getIO(signal, pStatus, pResultBOOL := 0, pResultDINT := 0, pResultLREAL := pResult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetIODigital" Id="{9be63dba-bb17-4051-930b-859270d1ab9b}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD GetIODigital : BOOL
VAR_INPUT
	signal : STRING;
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
	pResult : POINTER TO BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GetIODigital := _getIO(signal, pStatus, pResultBOOL := pResult, pResultDINT := 0, pResultLREAL := 0);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetIOGroup" Id="{7a4347af-368e-48dc-876d-605869fae69a}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD GetIOGroup : BOOL
VAR_INPUT
	signal : STRING;
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
	pResult : POINTER TO DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GetIOGroup := _getIO(signal, pStatus, pResultBOOL := 0, pResultDINT := pResult, pResultLREAL := 0);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetState" Id="{39878dda-bc14-4b8b-833d-1d9c4ab2cc84}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD GetState : BOOL
VAR_INPUT
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
	pResultState : POINTER TO STRING;
END_VAR

VAR
	request: AbbLinkinRequest_Typ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Check for invalid status pointer
IF pStatus = 0 THEN
	GetState := FALSE;
	RETURN;
END_IF;

// Clear Status
_clearRequestStatus(pStatus);

// Check for invalid results pointer
IF pResultState = 0 THEN
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(ABBLINKIN_COMMAND_TYPE.GET_STATE);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ' results pointer invalid.');
	GetState := FALSE;
	RETURN;
END_IF

request.pStatus := pStatus;
request.command := ABBLINKIN_COMMAND_TYPE.GET_STATE;
request.httpMethod :=  ETcIotHttpRequestType.HTTP_Get;

CASE configuration.rwsVersion OF
	ABBLINKIN_RWS_API_VERSION.V1:
		request.uri := '/rw/rapid/execution?json=1';

	ABBLINKIN_RWS_API_VERSION.V2:	
		request.uri := '/rw/rapid/execution';
END_CASE

request.results.pDataString := pResultState;

// Add Request to Queue, and Set Busy (or Error) Status
IF _requestQueueAdd(request) THEN
	pStatus^.busy := TRUE;
	GetState := TRUE;
ELSE
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(request.command);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ' could not be added to request Queue');
	GetState := FALSE;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetSymbolBool" Id="{85af9ad1-0b82-4752-9ea8-7aabc8bae9aa}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD GetSymbolBool : BOOL
VAR_INPUT
	signal : STRING;
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
	pResult : POINTER TO BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GetSymbolBool:= _getSymbol(signal, pStatus, pResultBool := pResult, pResultLreal := 0, pResultString := 0);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetSymbolNum" Id="{c73eb3bb-bcb7-4caf-a2b4-caeb0155d5ab}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD GetSymbolNum : BOOL
VAR_INPUT
	signal : STRING;
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
	pResult : POINTER TO LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GetSymbolNum := _getSymbol(signal, pStatus, pResultBool := 0, pResultLreal := pResult, pResultString := 0);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetSymbolString" Id="{003e92a6-59fd-4b99-8992-f758da147260}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD GetSymbolString : BOOL
VAR_INPUT
	signal : STRING;
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
	pResult : POINTER TO STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GetSymbolString := _getSymbol(signal, pStatus, pResultBool := 0, pResultLreal := 0, pResultString := pResult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerOff" Id="{7e704635-bfa1-4267-9db0-7f188918765f}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PowerOff : BOOL
VAR_INPUT
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
END_VAR

VAR
	request: AbbLinkinRequest_Typ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pStatus = 0 THEN
	PowerOff := FALSE;
	RETURN;
END_IF;

// Clear Status
_clearRequestStatus(pStatus);

request.pStatus := pStatus;
request.command := ABBLINKIN_COMMAND_TYPE.POWER_OFF;
request.httpMethod :=  ETcIotHttpRequestType.HTTP_POST;

CASE configuration.rwsVersion OF
	ABBLINKIN_RWS_API_VERSION.V1:
		request.uri := '/rw/panel/ctrlstate?action=setctrlstate&json=1';
		request.httpBody := 'ctrl-state=motoroff';

	ABBLINKIN_RWS_API_VERSION.V2:	
		request.uri := '/rw/panel/ctrl-state';
		request.httpBody := 'ctrl-state=motoroff';
		
END_CASE

// Add Request to Queue, and Set Busy (or Error) Status
IF _requestQueueAdd(request) THEN
	pStatus^.busy := TRUE;
	PowerOff := TRUE;
ELSE
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(request.command);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ' could not be added to request Queue');
	PowerOff := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerOn" Id="{af5386e8-963b-4ad9-be85-5e9b6c633ca2}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD PowerOn : BOOL
VAR_INPUT
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
END_VAR

VAR
	request: AbbLinkinRequest_Typ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pStatus = 0 THEN
	PowerOn := FALSE;
	RETURN;
END_IF;

// Clear Status
_clearRequestStatus(pStatus);

request.pStatus := pStatus;
request.command := ABBLINKIN_COMMAND_TYPE.POWER_ON;
request.httpMethod :=  ETcIotHttpRequestType.HTTP_POST;

CASE configuration.rwsVersion OF
	ABBLINKIN_RWS_API_VERSION.V1:
		request.uri := '/rw/panel/ctrlstate?action=setctrlstate&json=1';
		request.httpBody := 'ctrl-state=motoron';

	ABBLINKIN_RWS_API_VERSION.V2:	
		request.uri := '/rw/panel/ctrl-state';
		request.httpBody := 'ctrl-state=motoron';
		
END_CASE

// Add Request to Queue, and Set Busy (or Error) Status
IF _requestQueueAdd(request) THEN
	pStatus^.busy := TRUE;
	PowerOn := TRUE;
ELSE
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(request.command);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ' could not be added to request Queue');
	PowerOn := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RapidReset" Id="{e080191b-cd26-4298-a719-9d96ed9cd49e}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD RapidReset : BOOL
VAR_INPUT
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
END_VAR

VAR
	request: AbbLinkinRequest_Typ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pStatus = 0 THEN
	RapidReset := FALSE;
	RETURN;
END_IF;

// Clear Status
_clearRequestStatus(pStatus);

request.pStatus := pStatus;
request.command := ABBLINKIN_COMMAND_TYPE.RAPID_RESET;
request.httpMethod :=  ETcIotHttpRequestType.HTTP_POST;

CASE configuration.rwsVersion OF
	ABBLINKIN_RWS_API_VERSION.V1:
		request.uri := '/rw/rapid/execution?action=resetpp&json=1';
		request.httpBody := '';

	ABBLINKIN_RWS_API_VERSION.V2:	
		request.uri := '/rw/rapid/execution/resetpp';
		request.httpBody := '';
		
END_CASE

// Add Request to Queue, and Set Busy (or Error) Status
IF _requestQueueAdd(request) THEN
	pStatus^.busy := TRUE;
	RapidReset := TRUE;
ELSE
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(request.command);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ' could not be added to request Queue');
	RapidReset := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RapidStart" Id="{3bbfc09a-b007-47b4-80b0-3bd61acb2173}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD RapidStart : BOOL
VAR_INPUT
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
END_VAR

VAR
	request: AbbLinkinRequest_Typ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pStatus = 0 THEN
	RapidStart := FALSE;
	RETURN;
END_IF;

// Clear Status
_clearRequestStatus(pStatus);

request.pStatus := pStatus;
request.command := ABBLINKIN_COMMAND_TYPE.RAPID_START;
request.httpMethod :=  ETcIotHttpRequestType.HTTP_POST;

CASE configuration.rwsVersion OF
	ABBLINKIN_RWS_API_VERSION.V1:
		request.uri := '/rw/rapid/execution?action=start&json=1';
		request.httpBody := '';
		request.httpBody := CONCAT(request.httpBody, 'regain=continue');
		request.httpBody := CONCAT(request.httpBody, '&execmode=continue');
		request.httpBody := CONCAT(request.httpBody, '&condition=none');
		request.httpBody := CONCAT(request.httpBody, '&cycle=once');
		request.httpBody := CONCAT(request.httpBody, '&stopatbp=disabled');
		request.httpBody := CONCAT(request.httpBody, '&alltaskbytsp=false');

	ABBLINKIN_RWS_API_VERSION.V2:	
		request.uri := '/rw/rapid/execution/start';
		request.httpBody := '';
		request.httpBody := CONCAT(request.httpBody, 'regain=continue');
		request.httpBody := CONCAT(request.httpBody, '&execmode=continue');
		request.httpBody := CONCAT(request.httpBody, '&condition=none');
		request.httpBody := CONCAT(request.httpBody, '&cycle=once');
		request.httpBody := CONCAT(request.httpBody, '&stopatbp=disabled');
		request.httpBody := CONCAT(request.httpBody, '&alltaskbytsp=false');
		
END_CASE

// Add Request to Queue, and Set Busy (or Error) Status
IF _requestQueueAdd(request) THEN
	pStatus^.busy := TRUE;
	RapidStart := TRUE;
ELSE
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(request.command);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ' could not be added to request Queue');
	RapidStart := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RapidStop" Id="{2b770e99-7d38-409f-b1ad-b5b0b0d97576}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD RapidStop : BOOL
VAR_INPUT
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
END_VAR

VAR
	request: AbbLinkinRequest_Typ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pStatus = 0 THEN
	RapidStop := FALSE;
	RETURN;
END_IF;

// Clear Status
_clearRequestStatus(pStatus);

request.pStatus := pStatus;
request.command := ABBLINKIN_COMMAND_TYPE.RAPID_STOP;
request.httpMethod :=  ETcIotHttpRequestType.HTTP_POST;

CASE configuration.rwsVersion OF
	ABBLINKIN_RWS_API_VERSION.V1:
		request.uri := '/rw/rapid/execution?action=stop&json=1';
		request.httpBody := '';

	ABBLINKIN_RWS_API_VERSION.V2:	
		request.uri := '/rw/rapid/execution/stop';
		request.httpBody := '';
		
END_CASE

// Add Request to Queue, and Set Busy (or Error) Status
IF _requestQueueAdd(request) THEN
	pStatus^.busy := TRUE;
	RapidStop := TRUE;
ELSE
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(request.command);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ' could not be added to request Queue');
	RapidStop := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetIO" Id="{ce5e4a58-9783-46a9-ba0d-44594affd7f4}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD SetIO : BOOL
VAR_INPUT
	signal : STRING;
	value : ANY;
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
END_VAR
VAR
	request: AbbLinkinRequest_Typ;
	pBool: POINTER TO BOOL;
	pSint: POINTER TO SINT;
	pUsint: POINTER TO USINT;
	pInt: POINTER TO INT;
	pUint: POINTER TO UINT;
	pDint: POINTER TO DINT;
	pUdint: POINTER TO UDINT;
	pReal: POINTER TO REAL;
	pLreal: POINTER TO LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Check for invalid status pointer
IF pStatus = 0 THEN
	SetIO := FALSE;
	RETURN;
END_IF;

// Clear Status
_clearRequestStatus(pStatus);

request.pStatus := pStatus;
request.command := ABBLINKIN_COMMAND_TYPE.SET_IO;
request.httpMethod :=  ETcIotHttpRequestType.HTTP_POST;

CASE configuration.rwsVersion OF
	ABBLINKIN_RWS_API_VERSION.V1:
		request.uri := '/rw/iosystem/signals/';
		request.uri := concat(request.uri, signal);
		request.uri := concat(request.uri, '?action=set');
		
	ABBLINKIN_RWS_API_VERSION.V2:
		request.uri := '/rw/iosystem/signals/';
		request.uri := concat(request.uri, signal);
		request.uri := concat(request.uri, '/set-value');

END_CASE

request.httpBody := 'lvalue=';
CASE value.TypeClass OF 
	__SYSTEM.TYPE_CLASS.TYPE_BOOL:
		pBool := value.pValue;
		IF pBool^ THEN
			request.httpBody := CONCAT(request.httpBody, '1');
		ELSE
			request.httpBody := CONCAT(request.httpBody, '0');
		END_IF;
		
	__SYSTEM.TYPE_CLASS.TYPE_SINT:
		pSint := value.pValue;
		request.httpBody := CONCAT(request.httpBody, SINT_TO_STRING(pSint^));
	__SYSTEM.TYPE_CLASS.TYPE_USINT:
		pUsint := value.pValue;
		request.httpBody := CONCAT(request.httpBody, USINT_TO_STRING(pUsint^));
	__SYSTEM.TYPE_CLASS.TYPE_INT:
		pInt := value.pValue;
		request.httpBody := CONCAT(request.httpBody, INT_TO_STRING(pInt^));
	__SYSTEM.TYPE_CLASS.TYPE_UINT:
		pUint := value.pValue;
		request.httpBody := CONCAT(request.httpBody, UINT_TO_STRING(pUint^));
	__SYSTEM.TYPE_CLASS.TYPE_DINT:
		pDint := value.pValue;
		request.httpBody := CONCAT(request.httpBody, DINT_TO_STRING(pDint^));
	__SYSTEM.TYPE_CLASS.TYPE_UDINT:
		pUdint := value.pValue;
		request.httpBody := CONCAT(request.httpBody, UDINT_TO_STRING(pUdint^));
		
	__SYSTEM.TYPE_CLASS.TYPE_REAL:
		pReal := value.pValue;
		request.httpBody := CONCAT(request.httpBody, REAL_TO_STRING(pReal^));
	__SYSTEM.TYPE_CLASS.TYPE_LREAL:
		pLreal := value.pValue;
		request.httpBody := CONCAT(request.httpBody, LREAL_TO_STRING(pLreal^));
		
ELSE
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(ABBLINKIN_COMMAND_TYPE.SET_IO);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ' was passed an unsupported "value" datatype');
	SetIO := FALSE;
	RETURN;
END_CASE

// Add Request to Queue, and Set Busy (or Error) Status
IF _requestQueueAdd(request) THEN
	pStatus^.busy := TRUE;
	SetIO := TRUE;
ELSE
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(request.command);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ' could not be added to request Queue');
	SetIO := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetSymbol" Id="{bc0a5da5-b662-4b6f-a5f4-f2caf9d05bbf}">
      <Declaration><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
METHOD SetSymbol : BOOL
VAR_INPUT
	name : STRING;
	value : ANY;
	pStatus	: POINTER TO AbbLinkinRequestStatus_Typ;
END_VAR

VAR
	request: AbbLinkinRequest_Typ;
	pBool: POINTER TO BOOL;
	pSint: POINTER TO SINT;
	pUsint: POINTER TO USINT;
	pInt: POINTER TO INT;
	pUint: POINTER TO UINT;
	pDint: POINTER TO DINT;
	pUdint: POINTER TO UDINT;
	pReal: POINTER TO REAL;
	pLreal: POINTER TO LREAL;
	pString: POINTER TO STRING;
	pWString: POINTER TO WSTRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Check for invalid status pointer
IF pStatus = 0 THEN
	SetSymbol := FALSE;
	RETURN;
END_IF;

// Clear Status
_clearRequestStatus(pStatus);

request.pStatus := pStatus;
request.command := ABBLINKIN_COMMAND_TYPE.SET_SYMBOL;
request.httpMethod :=  ETcIotHttpRequestType.HTTP_POST;

CASE configuration.rwsVersion OF
	ABBLINKIN_RWS_API_VERSION.V1:
		request.uri := '/rw/rapid/symbol/data/';
		request.uri := concat(request.uri, name);
		request.uri := concat(request.uri, '?action=set');
		
	ABBLINKIN_RWS_API_VERSION.V2:
		request.uri := '/rw/rapid/symbol/';
		request.uri := concat(request.uri, name);
		request.uri := concat(request.uri, '/data');
		
END_CASE

request.httpBody := 'value=';
CASE value.TypeClass OF 
	__SYSTEM.TYPE_CLASS.TYPE_BOOL:
		pBool := value.pValue;
		IF pBool^ THEN
			request.httpBody := CONCAT(request.httpBody, 'TRUE');
		ELSE
			request.httpBody := CONCAT(request.httpBody, 'FALSE');
		END_IF;
		
	__SYSTEM.TYPE_CLASS.TYPE_SINT:
		pSint := value.pValue;
		request.httpBody := CONCAT(request.httpBody, SINT_TO_STRING(pSint^));
	__SYSTEM.TYPE_CLASS.TYPE_USINT:
		pUsint := value.pValue;
		request.httpBody := CONCAT(request.httpBody, USINT_TO_STRING(pUsint^));
	__SYSTEM.TYPE_CLASS.TYPE_INT:
		pInt := value.pValue;
		request.httpBody := CONCAT(request.httpBody, INT_TO_STRING(pInt^));
	__SYSTEM.TYPE_CLASS.TYPE_UINT:
		pUint := value.pValue;
		request.httpBody := CONCAT(request.httpBody, UINT_TO_STRING(pUint^));
	__SYSTEM.TYPE_CLASS.TYPE_DINT:
		pDint := value.pValue;
		request.httpBody := CONCAT(request.httpBody, DINT_TO_STRING(pDint^));
	__SYSTEM.TYPE_CLASS.TYPE_UDINT:
		pUdint := value.pValue;
		request.httpBody := CONCAT(request.httpBody, UDINT_TO_STRING(pUdint^));
		
	__SYSTEM.TYPE_CLASS.TYPE_REAL:
		pReal := value.pValue;
		request.httpBody := CONCAT(request.httpBody, REAL_TO_STRING(pReal^));
	__SYSTEM.TYPE_CLASS.TYPE_LREAL:
		pLreal := value.pValue;
		request.httpBody := CONCAT(request.httpBody, LREAL_TO_STRING(pLreal^));
		
	__SYSTEM.TYPE_CLASS.TYPE_STRING:
		request.httpBody := CONCAT(request.httpBody, '"');
		pString := value.pValue;
		request.httpBody := CONCAT(request.httpBody, pString^);
		request.httpBody := CONCAT(request.httpBody, '"');
	__SYSTEM.TYPE_CLASS.TYPE_WSTRING:
		request.httpBody := CONCAT(request.httpBody, '"');
		pWString := value.pValue;
		request.httpBody := CONCAT(request.httpBody, WSTRING_TO_STRING(pWString^));
		request.httpBody := CONCAT(request.httpBody, '"');
		
ELSE
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(ABBLINKIN_COMMAND_TYPE.SET_SYMBOL);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ' was passed an unsupported "value" datatype');
	SetSymbol := FALSE;
	RETURN;
END_CASE

// Add Request to Queue, and Set Busy (or Error) Status
IF _requestQueueAdd(request) THEN
	pStatus^.busy := TRUE;
	SetSymbol := TRUE;
ELSE
	pStatus^.error := TRUE;
	pStatus^.errorMsg := TO_STRING(request.command);
	pStatus^.errorMsg := CONCAT(pStatus^.errorMsg, ' could not be added to request Queue');
	SetSymbol := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="TcAbbLinkin">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._calculateDigestResponse">
      <LineId Id="59" Count="1" />
      <LineId Id="32" Count="5" />
      <LineId Id="39" Count="0" />
      <LineId Id="41" Count="2" />
      <LineId Id="6" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="50" Count="2" />
      <LineId Id="54" Count="0" />
      <LineId Id="56" Count="2" />
      <LineId Id="45" Count="3" />
      <LineId Id="11" Count="11" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="8" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._callCommandSuccessHandler">
      <LineId Id="13" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._clearRequestStatus">
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._configureClient">
      <LineId Id="9" Count="4" />
      <LineId Id="24" Count="0" />
      <LineId Id="15" Count="5" />
      <LineId Id="32" Count="9" />
      <LineId Id="31" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._encodeBase64">
      <LineId Id="15" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._getIO">
      <LineId Id="25" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="115" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="55" Count="3" />
      <LineId Id="36" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="60" Count="2" />
      <LineId Id="54" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="83" Count="4" />
      <LineId Id="93" Count="0" />
      <LineId Id="97" Count="1" />
      <LineId Id="89" Count="0" />
      <LineId Id="95" Count="1" />
      <LineId Id="90" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="99" Count="6" />
      <LineId Id="114" Count="0" />
      <LineId Id="107" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._getIORespCallbackSuccess">
      <LineId Id="32" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="25" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="97" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="110" Count="1" />
      <LineId Id="115" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="82" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._getStateRespCallbackSuccess">
      <LineId Id="32" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="25" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="27" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="82" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._getSymbol">
      <LineId Id="25" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="55" Count="3" />
      <LineId Id="36" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="60" Count="2" />
      <LineId Id="54" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="83" Count="4" />
      <LineId Id="93" Count="0" />
      <LineId Id="97" Count="1" />
      <LineId Id="89" Count="0" />
      <LineId Id="141" Count="2" />
      <LineId Id="90" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="99" Count="6" />
      <LineId Id="114" Count="0" />
      <LineId Id="107" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._getSymbolRespCallbackSuccess">
      <LineId Id="32" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="25" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="97" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="110" Count="1" />
      <LineId Id="115" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="82" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._parseWwwAuthForParameter">
      <LineId Id="41" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="14" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._requestQueueAdd">
      <LineId Id="10" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._requestQueuePop">
      <LineId Id="10" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._setHeader">
      <LineId Id="36" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="64" Count="7" />
      <LineId Id="74" Count="1" />
      <LineId Id="62" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="106" Count="1" />
      <LineId Id="109" Count="1" />
      <LineId Id="108" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="114" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="127" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin._storeCookies">
      <LineId Id="6" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="33" Count="2" />
      <LineId Id="40" Count="4" />
      <LineId Id="53" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="63" Count="3" />
      <LineId Id="17" Count="0" />
      <LineId Id="54" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="8" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.AckError">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.ConnectionStart">
      <LineId Id="57" Count="1" />
      <LineId Id="64" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="62" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="69" Count="1" />
      <LineId Id="67" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.ConnectionStop">
      <LineId Id="17" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.Cyclic">
      <LineId Id="7" Count="1" />
      <LineId Id="10" Count="1" />
      <LineId Id="63" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="64" Count="2" />
      <LineId Id="70" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="79" Count="1" />
      <LineId Id="82" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="437" Count="0" />
      <LineId Id="447" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="442" Count="0" />
      <LineId Id="445" Count="0" />
      <LineId Id="444" Count="0" />
      <LineId Id="440" Count="0" />
      <LineId Id="438" Count="0" />
      <LineId Id="448" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="281" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="87" Count="2" />
      <LineId Id="142" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="160" Count="1" />
      <LineId Id="101" Count="1" />
      <LineId Id="99" Count="1" />
      <LineId Id="98" Count="0" />
      <LineId Id="103" Count="1" />
      <LineId Id="162" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="106" Count="3" />
      <LineId Id="432" Count="0" />
      <LineId Id="123" Count="2" />
      <LineId Id="129" Count="0" />
      <LineId Id="135" Count="1" />
      <LineId Id="138" Count="0" />
      <LineId Id="643" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="450" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="140" Count="1" />
      <LineId Id="182" Count="1" />
      <LineId Id="134" Count="0" />
      <LineId Id="170" Count="2" />
      <LineId Id="329" Count="11" />
      <LineId Id="128" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="292" Count="15" />
      <LineId Id="328" Count="0" />
      <LineId Id="309" Count="2" />
      <LineId Id="270" Count="0" />
      <LineId Id="312" Count="2" />
      <LineId Id="320" Count="2" />
      <LineId Id="271" Count="0" />
      <LineId Id="323" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="429" Count="0" />
      <LineId Id="342" Count="3" />
      <LineId Id="436" Count="0" />
      <LineId Id="351" Count="1" />
      <LineId Id="384" Count="0" />
      <LineId Id="381" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="482" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="483" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="389" Count="0" />
      <LineId Id="391" Count="1" />
      <LineId Id="387" Count="0" />
      <LineId Id="380" Count="0" />
      <LineId Id="378" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="395" Count="0" />
      <LineId Id="358" Count="0" />
      <LineId Id="394" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="376" Count="1" />
      <LineId Id="324" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="422" Count="0" />
      <LineId Id="424" Count="0" />
      <LineId Id="459" Count="0" />
      <LineId Id="469" Count="0" />
      <LineId Id="545" Count="0" />
      <LineId Id="487" Count="6" />
      <LineId Id="560" Count="3" />
      <LineId Id="548" Count="0" />
      <LineId Id="564" Count="0" />
      <LineId Id="567" Count="4" />
      <LineId Id="566" Count="0" />
      <LineId Id="462" Count="0" />
      <LineId Id="632" Count="1" />
      <LineId Id="572" Count="8" />
      <LineId Id="464" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="609" Count="0" />
      <LineId Id="631" Count="0" />
      <LineId Id="615" Count="12" />
      <LineId Id="613" Count="0" />
      <LineId Id="602" Count="1" />
      <LineId Id="582" Count="0" />
      <LineId Id="635" Count="0" />
      <LineId Id="425" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="421" Count="0" />
      <LineId Id="416" Count="0" />
      <LineId Id="410" Count="5" />
      <LineId Id="401" Count="0" />
      <LineId Id="276" Count="1" />
      <LineId Id="76" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="191" Count="1" />
      <LineId Id="29" Count="2" />
      <LineId Id="41" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="48" Count="4" />
      <LineId Id="44" Count="0" />
      <LineId Id="57" Count="2" />
      <LineId Id="61" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.GetIOAnalog">
      <LineId Id="123" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.GetIODigital">
      <LineId Id="123" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.GetIOGroup">
      <LineId Id="123" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.GetState">
      <LineId Id="102" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="84" Count="1" />
      <LineId Id="96" Count="0" />
      <LineId Id="99" Count="1" />
      <LineId Id="98" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="92" Count="2" />
      <LineId Id="90" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.GetSymbolBool">
      <LineId Id="15" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.GetSymbolNum">
      <LineId Id="15" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.GetSymbolString">
      <LineId Id="15" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.PowerOff">
      <LineId Id="15" Count="5" />
      <LineId Id="5" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="30" Count="1" />
      <LineId Id="36" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="51" Count="8" />
      <LineId Id="21" Count="0" />
      <LineId Id="60" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.PowerOn">
      <LineId Id="15" Count="5" />
      <LineId Id="5" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="30" Count="1" />
      <LineId Id="36" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="51" Count="8" />
      <LineId Id="21" Count="0" />
      <LineId Id="60" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.RapidReset">
      <LineId Id="15" Count="5" />
      <LineId Id="5" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="30" Count="1" />
      <LineId Id="36" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="51" Count="8" />
      <LineId Id="21" Count="0" />
      <LineId Id="60" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.RapidStart">
      <LineId Id="15" Count="5" />
      <LineId Id="5" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="30" Count="1" />
      <LineId Id="36" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="96" Count="4" />
      <LineId Id="41" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="110" Count="6" />
      <LineId Id="49" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="51" Count="8" />
      <LineId Id="21" Count="0" />
      <LineId Id="60" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.RapidStop">
      <LineId Id="15" Count="5" />
      <LineId Id="5" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="30" Count="1" />
      <LineId Id="36" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="51" Count="8" />
      <LineId Id="21" Count="0" />
      <LineId Id="60" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.SetIO">
      <LineId Id="17" Count="7" />
      <LineId Id="161" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="111" Count="0" />
      <LineId Id="115" Count="2" />
      <LineId Id="120" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="180" Count="2" />
      <LineId Id="118" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="64" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="83" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="91" Count="1" />
      <LineId Id="142" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="99" Count="1" />
      <LineId Id="103" Count="3" />
      <LineId Id="77" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="148" Count="9" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="TcAbbLinkin.SetSymbol">
      <LineId Id="14" Count="7" />
      <LineId Id="134" Count="1" />
      <LineId Id="22" Count="9" />
      <LineId Id="157" Count="2" />
      <LineId Id="32" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="34" Count="11" />
      <LineId Id="47" Count="2" />
      <LineId Id="51" Count="2" />
      <LineId Id="55" Count="2" />
      <LineId Id="59" Count="2" />
      <LineId Id="63" Count="2" />
      <LineId Id="67" Count="2" />
      <LineId Id="71" Count="3" />
      <LineId Id="76" Count="1" />
      <LineId Id="113" Count="1" />
      <LineId Id="121" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="122" Count="1" />
      <LineId Id="131" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="79" Count="6" />
      <LineId Id="88" Count="10" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>