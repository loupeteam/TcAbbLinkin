<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcA2B2KittenDigest" Id="{a3978e12-7f6d-45c9-a812-623e01ee8766}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcA2B2KittenDigest
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_httpClient:			FB_IotHttpClient;
	_httpRequest:			FB_IotHttpRequest;
	_httpRequestHeader:		FB_IotHttpHeaderFieldMap;
	bSendGet:				BOOL;
	connectNow: 			BOOL;
	requestNow: 			BOOL;
	sContent				: STRING(2000);
	configClientConnect: BOOL;
	getContentNow: BOOL;
	
	_jsonDomParser : FB_JsonDomParser;
	jsonRoot : SJsonValue;
	jsonProp : SJsonValue;
	parseContentNow: BOOL;
	sState: STRING;
	
	
	_jsonSaxParser : 				FB_JsonSaxReader;
	jsonSaxHandler_RobotState :		JsonSaxHandler_RobotState;
	
	saxParseContentNow: 			BOOL;
	reqState: INT;
	requestState: INT;
	requestReset: BOOL;
	requestError: STRING;
	
	wwwAuthContent : STRING(1000);
	numberOfDigestAuthAttempts: INT;
	maxDigestAuthAttempts: INT := 1;
	digestLoc: INT;
	authContentLen: INT;
	tempString: STRING(1000);
	secondQuoteLoc: INT;
	firstQuoteLoc: INT;
	keyLoc: INT;
	valueStr: STRING(255);
	realmStr: STRING(255);
	qopStr: STRING(255);
	nonceStr: STRING(255);
	opaqueStr: STRING(255);
	pwStr: STRING;
	unStr: STRING;
	methStr: STRING;
	uriStr: STRING;
	cnonceStr: STRING;
	ncStr: STRING;
	retVal: BOOL;	
	h1_byArr: ARRAY[0..15] OF BYTE;
	h1_hexStr: STRING;
	h2_byArr: ARRAY[0..15] OF BYTE;
	h2_hexStr: STRING;
	response_byArr: ARRAY[0..15] OF BYTE;
	response_hexStr: STRING;
	i: INT;
	authContentStr: STRING(2000);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF configClientConnect THEN 
	_httpClient.sHostName := '127.0.0.1';
	_httpClient.nHostPort := 80;
	_httpClient.bKeepAlive := TRUE;
	_httpClient.stTLS.bNoServerCertCheck:=TRUE;
	_httpClient.tConnectionTimeout := T#10S;
	configClientConnect := FALSE;
END_IF

IF connectNow THEN
	_httpClient.Execute();
END_IF


// Reset
IF requestReset THEN
	requestState := 0;
END_IF


CASE requestState OF
	
	0: // idle
		// Reset things there
	
	
		IF requestNow THEN
			requestState := 10;
			requestNow := FALSE;
		END_IF
		
	10: // Send Request 
		
		_httpRequestHeader.AddField('accept', 'application/hal+json;v=2.0', FALSE);
		_httpRequest.SendRequest(sUri:='/rw/rapid/execution', fbClient:=_httpClient, eRequestType:=ETcIotHttpRequestType.HTTP_Get, pContent:=0, nContentSize:=0, fbHeader:=_httpRequestHeader);
		
		requestState := 12;
		
	12: // Await response
		IF _httpRequest.bError THEN	
			requestError := 'Error on Http Request';
			requestState := 911;
		ELSIF NOT _httpRequest.bBusy THEN
			// Response received
			CASE _httpRequest.nStatusCode OF
				200: // OK
					requestState := 200;
				401: // Not Authorized
					requestState := 401;
				ELSE
					requestError := 'Bad response code received';
					requestState := 911;
			END_CASE
		END_IF
		
	200: // Handle 200 OK
		requestState := 999;
	
	401: // Handle 401 Not Authorized
		
		IF _httpRequest.GetHeaderField('WWW-Authenticate', ADR(wwwAuthContent), SIZEOF(wwwAuthContent)) THEN 
			// Header found
			IF numberOfDigestAuthAttempts < maxDigestAuthAttempts THEN
				requestState := 450;
			ELSE
				requestError := 'Not authorized. Digest Authentication attempts maxed ';
				requestState := 911;
			END_IF
			
		ELSE
			requestError := 'Not authorized. No WWW-Authenticate header to digest. ';
			requestState := 911;
		END_IF
	
	450: // Parse WWW-Authenticate Header
		
		authContentLen := len(wwwAuthContent);
	
		digestLoc := FIND(wwwAuthContent, 'Digest');
		IF digestLoc = 0 THEN 
			requestError := 'Digest not found in WWW-Authenticate header. ';
			requestState := 911;
		END_IF
		
		// realm
		keyLoc := FIND(wwwAuthContent, 'realm');
		IF keyLoc = 0 THEN 
			requestError := 'realm not found in WWW-Authenticate header. ';
			requestState := 911;
		END_IF
		tempString := RIGHT(wwwAuthContent, authContentLen - keyLoc);
		firstQuoteLoc := FIND(tempString, '"') + keyLoc;
		tempString := RIGHT(wwwAuthContent, authContentLen - firstQuoteLoc);
		secondQuoteLoc := FIND(tempString, '"') + firstQuoteLoc;
		valueStr := MID(wwwAuthContent, secondQuoteLoc - firstQuoteLoc - 1, firstQuoteLoc + 1);
		realmStr := valueStr;
		
		// qop
		keyLoc := FIND(wwwAuthContent, 'qop');
		IF keyLoc = 0 THEN 
			requestError := 'qop not found in WWW-Authenticate header. ';
			requestState := 911;
		END_IF
		tempString := RIGHT(wwwAuthContent, authContentLen - keyLoc);
		firstQuoteLoc := FIND(tempString, '"') + keyLoc;
		tempString := RIGHT(wwwAuthContent, authContentLen - firstQuoteLoc);
		secondQuoteLoc := FIND(tempString, '"') + firstQuoteLoc;
		valueStr := MID(wwwAuthContent, secondQuoteLoc - firstQuoteLoc - 1, firstQuoteLoc + 1);
		qopStr := valueStr;
		
		// nonce
		keyLoc := FIND(wwwAuthContent, 'nonce');
		IF keyLoc = 0 THEN 
			requestError := 'nonce not found in WWW-Authenticate header. ';
			requestState := 911;
		END_IF
		tempString := RIGHT(wwwAuthContent, authContentLen - keyLoc);
		firstQuoteLoc := FIND(tempString, '"') + keyLoc;
		tempString := RIGHT(wwwAuthContent, authContentLen - firstQuoteLoc);
		secondQuoteLoc := FIND(tempString, '"') + firstQuoteLoc;
		valueStr := MID(wwwAuthContent, secondQuoteLoc - firstQuoteLoc - 1, firstQuoteLoc + 1);
		nonceStr := valueStr;
		
		// opaque
		keyLoc := FIND(wwwAuthContent, 'opaque');
		IF keyLoc = 0 THEN 
			requestError := 'opaque not found in WWW-Authenticate header. ';
			requestState := 911;
		END_IF
		tempString := RIGHT(wwwAuthContent, authContentLen - keyLoc);
		firstQuoteLoc := FIND(tempString, '"') + keyLoc;
		tempString := RIGHT(wwwAuthContent, authContentLen - firstQuoteLoc);
		secondQuoteLoc := FIND(tempString, '"') + firstQuoteLoc;
		valueStr := MID(wwwAuthContent, secondQuoteLoc - firstQuoteLoc - 1, firstQuoteLoc + 1);
		opaqueStr := valueStr;
		
		
		requestState := 455;
		
	455: // Calculate Digest Response
	
			
		// Values collected via wireshark
		unStr := 'Default User';
		pwStr := 'robotics';
		//realmStr := 'validusers@robapi.abb';
		methStr := 'GET';
		uriStr := '/rw/rapid/execution';
		//qop := 'auth';
		//nonce := 'MGY0Yjc2MGY2Y2QyZjAwNzp2YWxpZHVzZXJzQHJvYmFwaS5hYmI6MTkwMjg5NjRlNGE6MA==';
		cnonceStr := 'diddLOPR';
		ncStr := '00000001';
		
		
		tempString := '';
		tempString := CONCAT(tempString, unStr);
		tempString := CONCAT(tempString, ':');
		tempString := CONCAT(tempString, realmStr);
		tempString := CONCAT(tempString, ':');
		tempString := CONCAT(tempString, pwStr);
		
		retVal := F_GenerateHashValue(E_HashMode.HASH_MD5, ADR(tempString), LEN(tempString), ADR(h1_byArr), SIZEOF(h1_byArr));
		
		h1_hexStr := '';
		FOR i := 0 TO 15 DO
			h1_hexStr := CONCAT(h1_hexStr, BYTE_TO_HEXSTR(h1_byArr[i], 2, TRUE));
		END_FOR
		
		
		tempString := '';
		tempString := CONCAT(tempString, methStr);
		tempString := CONCAT(tempString, ':');
		tempString := CONCAT(tempString, uriStr);
		
		retVal := F_GenerateHashValue(E_HashMode.HASH_MD5, ADR(tempString), LEN(tempString), ADR(h2_byArr), SIZEOF(h2_byArr));
		
		h2_hexStr := '';
		FOR i := 0 TO 15 DO
			h2_hexStr := CONCAT(h2_hexStr, BYTE_TO_HEXSTR(h2_byArr[i], 2, TRUE));
		END_FOR
		// expected value: 30bb6c0952d8c10cb9b2240a3772c67b
		
		
		tempString := '';
		tempString := CONCAT(tempString, h1_hexStr);
		tempString := CONCAT(tempString, ':');
		tempString := CONCAT(tempString, nonceStr);
		tempString := CONCAT(tempString, ':');
		tempString := CONCAT(tempString, ncStr);
		tempString := CONCAT(tempString, ':');
		tempString := CONCAT(tempString, cnonceStr);
		tempString := CONCAT(tempString, ':');
		tempString := CONCAT(tempString, qopStr);
		tempString := CONCAT(tempString, ':');
		tempString := CONCAT(tempString, h2_hexStr);
		
		retVal := F_GenerateHashValue(E_HashMode.HASH_MD5, ADR(tempString), LEN(tempString), ADR(response_byArr), SIZEOF(response_byArr));
		
		response_hexStr := '';
		FOR i := 0 TO 15 DO
			response_hexStr := CONCAT(response_hexStr, BYTE_TO_HEXSTR(response_byArr[i], 2, TRUE));
		END_FOR
		
		requestState := 460;
	
	460: // Formulate and send second request
	
		
		authContentStr := 'Digest username="';
		authContentStr := CONCAT(authContentStr, unStr);
		authContentStr := CONCAT(authContentStr, '", realm="');
		authContentStr := CONCAT(authContentStr, realmStr);
		authContentStr := CONCAT(authContentStr, '", nonce="');
		authContentStr := CONCAT(authContentStr, nonceStr);
		authContentStr := CONCAT(authContentStr, '", uri="');
		authContentStr := CONCAT(authContentStr, uriStr);
		authContentStr := CONCAT(authContentStr, '", algorithm="MD5", qop="');
		authContentStr := CONCAT(authContentStr, qopStr);
		authContentStr := CONCAT(authContentStr, '", nc="');
		authContentStr := CONCAT(authContentStr, ncStr);
		authContentStr := CONCAT(authContentStr, '", cnonce="');
		authContentStr := CONCAT(authContentStr, cnonceStr);
		authContentStr := CONCAT(authContentStr, '", response="');
		//authContentStr := CONCAT(authContentStr, response_hexStr);
		//authContentStr := CONCAT(authContentStr, '"');
		concat2(ADR(authContentStr), ADR(response_hexStr), ADR(authContentStr), SIZEOF(authcontentStr));
		concat2(ADR(authContentStr), ADR('"'), ADR(authContentStr), SIZEOF(authcontentStr));
		
		
		retVal := _httpRequestHeader.AddField('accept', 'application/hal+json;v=2.0', FALSE);
		retVal := _httpRequestHeader.AddField('Authorization', authContentStr, FALSE);
		_httpRequest.SendRequest(sUri:='/rw/rapid/execution', fbClient:=_httpClient, eRequestType:=ETcIotHttpRequestType.HTTP_Get, pContent:=0, nContentSize:=0, fbHeader:=_httpRequestHeader);
		
		requestState := 465;
		
	465: // Await response
	
		IF _httpRequest.bError THEN	
			requestError := 'Error on Http Request';
			requestState := 911;
		ELSIF NOT _httpRequest.bBusy THEN
			// Response received
			CASE _httpRequest.nStatusCode OF
				200: // OK
					requestState := 200;
				401: // Not Authorized
					requestState := 401;
				ELSE
					requestError := 'Bad response code received';
					requestState := 911;
			END_CASE
		END_IF
		
	
		
	911: // Error
		;
		
	999: // Done
		;
		
END_CASE



//IF _httpClient.bConnected AND requestNow THEN
IF requestNow THEN
	//_httpRequest.eCompressionMode := ;
	//_httpRequest.sContentType := ;
	
	_httpRequestHeader.AddField('accept', 'application/hal+json;v=2.0', FALSE);
	_httpRequestHeader.AddField('authorization', 'Basic RGVmYXVsdCBVc2VyOnJvYm90aWNz', FALSE);	// encoded Username: Default User, Password: robotics
	
	_httpRequest.SendRequest(sUri:='/rw/rapid/execution', fbClient:=_httpClient, eRequestType:=ETcIotHttpRequestType.HTTP_Get, pContent:=0, nContentSize:=0, fbHeader:=_httpRequestHeader);
	
	requestNow := FALSE;
END_IF


IF getContentNow THEN
	_httpRequest.GetContent(ADR(sContent), nContentSize:=SIZEOF(sContent), TRUE);
	getContentNow := FALSE;
END_IF


IF parseContentNow THEN
	jsonRoot := _jsonDomParser.ParseDocument(sContent);
	jsonProp := _jsonDomParser.FindMemberPath(jsonRoot, 'state#0/ctrlexecstate');	// See https://infosys.beckhoff.com/english.php?content=../content/1033/tcplclib_tc3_jsonxml/3664369803.html&id=4049129407046606983
	IF (jsonProp <> 0) THEN
  		sState := _jsonDomParser.GetString(jsonProp);
	END_IF
	
	parseContentNow := FALSE; 
END_IF


IF saxParseContentNow THEN
	jsonSaxHandler_RobotState.Reset();
	_jsonSaxParser.Parse(sContent, ipHdl := jsonSaxHandler_RobotState, );
	sState := jsonSaxHandler_RobotState.parsedState;
	
	saxParseContentNow := FALSE; 
END_IF






]]></ST>
    </Implementation>
    <LineIds Name="TcA2B2KittenDigest">
      <LineId Id="23" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="147" Count="2" />
      <LineId Id="49" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="343" Count="0" />
      <LineId Id="345" Count="1" />
      <LineId Id="344" Count="0" />
      <LineId Id="323" Count="1" />
      <LineId Id="328" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="349" Count="2" />
      <LineId Id="337" Count="1" />
      <LineId Id="342" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="358" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="361" Count="3" />
      <LineId Id="369" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="370" Count="1" />
      <LineId Id="378" Count="0" />
      <LineId Id="380" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="416" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="409" Count="1" />
      <LineId Id="412" Count="0" />
      <LineId Id="414" Count="0" />
      <LineId Id="413" Count="0" />
      <LineId Id="417" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="440" Count="0" />
      <LineId Id="442" Count="0" />
      <LineId Id="447" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="443" Count="0" />
      <LineId Id="441" Count="0" />
      <LineId Id="438" Count="1" />
      <LineId Id="435" Count="0" />
      <LineId Id="434" Count="0" />
      <LineId Id="428" Count="1" />
      <LineId Id="451" Count="0" />
      <LineId Id="468" Count="1" />
      <LineId Id="452" Count="0" />
      <LineId Id="458" Count="1" />
      <LineId Id="454" Count="0" />
      <LineId Id="494" Count="52" />
      <LineId Id="492" Count="0" />
      <LineId Id="641" Count="3" />
      <LineId Id="646" Count="0" />
      <LineId Id="652" Count="21" />
      <LineId Id="675" Count="3" />
      <LineId Id="680" Count="34" />
      <LineId Id="649" Count="0" />
      <LineId Id="651" Count="0" />
      <LineId Id="650" Count="0" />
      <LineId Id="647" Count="1" />
      <LineId Id="645" Count="0" />
      <LineId Id="735" Count="0" />
      <LineId Id="747" Count="7" />
      <LineId Id="757" Count="5" />
      <LineId Id="746" Count="0" />
      <LineId Id="787" Count="0" />
      <LineId Id="792" Count="1" />
      <LineId Id="790" Count="1" />
      <LineId Id="768" Count="1" />
      <LineId Id="767" Count="0" />
      <LineId Id="738" Count="0" />
      <LineId Id="788" Count="1" />
      <LineId Id="771" Count="0" />
      <LineId Id="786" Count="0" />
      <LineId Id="772" Count="13" />
      <LineId Id="770" Count="0" />
      <LineId Id="740" Count="0" />
      <LineId Id="389" Count="6" />
      <LineId Id="335" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="170" Count="1" />
      <LineId Id="108" Count="1" />
      <LineId Id="103" Count="0" />
      <LineId Id="125" Count="1" />
      <LineId Id="105" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="173" Count="1" />
      <LineId Id="172" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="224" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="262" Count="2" />
      <LineId Id="231" Count="1" />
      <LineId Id="38" Count="5" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>